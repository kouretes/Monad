// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SensorsMessage.proto

#ifndef PROTOBUF_SensorsMessage_2eproto__INCLUDED
#define PROTOBUF_SensorsMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SensorsMessage_2eproto();
void protobuf_AssignDesc_SensorsMessage_2eproto();
void protobuf_ShutdownFile_SensorsMessage_2eproto();

class InertialSensorsMessage;
class FSRSensorsMessage;
class UltaSoundSensorsMessage;
class HeadJointSensorsMessage;
class BodyJointSensorsMessage;
class RobotPositionSensorMessage;
class SensorPair;

// ===================================================================

class InertialSensorsMessage : public ::google::protobuf::Message {
 public:
  InertialSensorsMessage();
  virtual ~InertialSensorsMessage();
  
  InertialSensorsMessage(const InertialSensorsMessage& from);
  
  inline InertialSensorsMessage& operator=(const InertialSensorsMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const InertialSensorsMessage& default_instance();
  
  void Swap(InertialSensorsMessage* other);
  
  // implements Message ----------------------------------------------
  
  InertialSensorsMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InertialSensorsMessage& from);
  void MergeFrom(const InertialSensorsMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string host = 1 [default = "localhost"];
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 1;
  inline const ::std::string& host() const;
  inline void set_host(const ::std::string& value);
  inline void set_host(const char* value);
  inline void set_host(const char* value, size_t size);
  inline ::std::string* mutable_host();
  
  // required string publisher = 2 [default = ""];
  inline bool has_publisher() const;
  inline void clear_publisher();
  static const int kPublisherFieldNumber = 2;
  inline const ::std::string& publisher() const;
  inline void set_publisher(const ::std::string& value);
  inline void set_publisher(const char* value);
  inline void set_publisher(const char* value, size_t size);
  inline ::std::string* mutable_publisher();
  
  // required string topic = 3 [default = "global"];
  inline bool has_topic() const;
  inline void clear_topic();
  static const int kTopicFieldNumber = 3;
  inline const ::std::string& topic() const;
  inline void set_topic(const ::std::string& value);
  inline void set_topic(const char* value);
  inline void set_topic(const char* value, size_t size);
  inline ::std::string* mutable_topic();
  
  // required int32 timeout = 4 [default = 0];
  inline bool has_timeout() const;
  inline void clear_timeout();
  static const int kTimeoutFieldNumber = 4;
  inline ::google::protobuf::int32 timeout() const;
  inline void set_timeout(::google::protobuf::int32 value);
  
  // required string timestamp = 5 [default = ""];
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  inline const ::std::string& timestamp() const;
  inline void set_timestamp(const ::std::string& value);
  inline void set_timestamp(const char* value);
  inline void set_timestamp(const char* value, size_t size);
  inline ::std::string* mutable_timestamp();
  
  // repeated .SensorPair SensorData = 6;
  inline int sensordata_size() const;
  inline void clear_sensordata();
  static const int kSensorDataFieldNumber = 6;
  inline const ::SensorPair& sensordata(int index) const;
  inline ::SensorPair* mutable_sensordata(int index);
  inline ::SensorPair* add_sensordata();
  inline const ::google::protobuf::RepeatedPtrField< ::SensorPair >&
      sensordata() const;
  inline ::google::protobuf::RepeatedPtrField< ::SensorPair >*
      mutable_sensordata();
  
  // @@protoc_insertion_point(class_scope:InertialSensorsMessage)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* host_;
  static const ::std::string _default_host_;
  ::std::string* publisher_;
  static const ::std::string _default_publisher_;
  ::std::string* topic_;
  static const ::std::string _default_topic_;
  ::google::protobuf::int32 timeout_;
  ::std::string* timestamp_;
  static const ::std::string _default_timestamp_;
  ::google::protobuf::RepeatedPtrField< ::SensorPair > sensordata_;
  friend void  protobuf_AddDesc_SensorsMessage_2eproto();
  friend void protobuf_AssignDesc_SensorsMessage_2eproto();
  friend void protobuf_ShutdownFile_SensorsMessage_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static InertialSensorsMessage* default_instance_;
};
// -------------------------------------------------------------------

class FSRSensorsMessage : public ::google::protobuf::Message {
 public:
  FSRSensorsMessage();
  virtual ~FSRSensorsMessage();
  
  FSRSensorsMessage(const FSRSensorsMessage& from);
  
  inline FSRSensorsMessage& operator=(const FSRSensorsMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FSRSensorsMessage& default_instance();
  
  void Swap(FSRSensorsMessage* other);
  
  // implements Message ----------------------------------------------
  
  FSRSensorsMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FSRSensorsMessage& from);
  void MergeFrom(const FSRSensorsMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string host = 1 [default = "localhost"];
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 1;
  inline const ::std::string& host() const;
  inline void set_host(const ::std::string& value);
  inline void set_host(const char* value);
  inline void set_host(const char* value, size_t size);
  inline ::std::string* mutable_host();
  
  // required string publisher = 2 [default = ""];
  inline bool has_publisher() const;
  inline void clear_publisher();
  static const int kPublisherFieldNumber = 2;
  inline const ::std::string& publisher() const;
  inline void set_publisher(const ::std::string& value);
  inline void set_publisher(const char* value);
  inline void set_publisher(const char* value, size_t size);
  inline ::std::string* mutable_publisher();
  
  // required string topic = 3 [default = "global"];
  inline bool has_topic() const;
  inline void clear_topic();
  static const int kTopicFieldNumber = 3;
  inline const ::std::string& topic() const;
  inline void set_topic(const ::std::string& value);
  inline void set_topic(const char* value);
  inline void set_topic(const char* value, size_t size);
  inline ::std::string* mutable_topic();
  
  // required int32 timeout = 4 [default = 0];
  inline bool has_timeout() const;
  inline void clear_timeout();
  static const int kTimeoutFieldNumber = 4;
  inline ::google::protobuf::int32 timeout() const;
  inline void set_timeout(::google::protobuf::int32 value);
  
  // required string timestamp = 5 [default = ""];
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  inline const ::std::string& timestamp() const;
  inline void set_timestamp(const ::std::string& value);
  inline void set_timestamp(const char* value);
  inline void set_timestamp(const char* value, size_t size);
  inline ::std::string* mutable_timestamp();
  
  // repeated .SensorPair SensorData = 6;
  inline int sensordata_size() const;
  inline void clear_sensordata();
  static const int kSensorDataFieldNumber = 6;
  inline const ::SensorPair& sensordata(int index) const;
  inline ::SensorPair* mutable_sensordata(int index);
  inline ::SensorPair* add_sensordata();
  inline const ::google::protobuf::RepeatedPtrField< ::SensorPair >&
      sensordata() const;
  inline ::google::protobuf::RepeatedPtrField< ::SensorPair >*
      mutable_sensordata();
  
  // @@protoc_insertion_point(class_scope:FSRSensorsMessage)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* host_;
  static const ::std::string _default_host_;
  ::std::string* publisher_;
  static const ::std::string _default_publisher_;
  ::std::string* topic_;
  static const ::std::string _default_topic_;
  ::google::protobuf::int32 timeout_;
  ::std::string* timestamp_;
  static const ::std::string _default_timestamp_;
  ::google::protobuf::RepeatedPtrField< ::SensorPair > sensordata_;
  friend void  protobuf_AddDesc_SensorsMessage_2eproto();
  friend void protobuf_AssignDesc_SensorsMessage_2eproto();
  friend void protobuf_ShutdownFile_SensorsMessage_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static FSRSensorsMessage* default_instance_;
};
// -------------------------------------------------------------------

class UltaSoundSensorsMessage : public ::google::protobuf::Message {
 public:
  UltaSoundSensorsMessage();
  virtual ~UltaSoundSensorsMessage();
  
  UltaSoundSensorsMessage(const UltaSoundSensorsMessage& from);
  
  inline UltaSoundSensorsMessage& operator=(const UltaSoundSensorsMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UltaSoundSensorsMessage& default_instance();
  
  void Swap(UltaSoundSensorsMessage* other);
  
  // implements Message ----------------------------------------------
  
  UltaSoundSensorsMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UltaSoundSensorsMessage& from);
  void MergeFrom(const UltaSoundSensorsMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string host = 1 [default = "localhost"];
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 1;
  inline const ::std::string& host() const;
  inline void set_host(const ::std::string& value);
  inline void set_host(const char* value);
  inline void set_host(const char* value, size_t size);
  inline ::std::string* mutable_host();
  
  // required string publisher = 2 [default = ""];
  inline bool has_publisher() const;
  inline void clear_publisher();
  static const int kPublisherFieldNumber = 2;
  inline const ::std::string& publisher() const;
  inline void set_publisher(const ::std::string& value);
  inline void set_publisher(const char* value);
  inline void set_publisher(const char* value, size_t size);
  inline ::std::string* mutable_publisher();
  
  // required string topic = 3 [default = "global"];
  inline bool has_topic() const;
  inline void clear_topic();
  static const int kTopicFieldNumber = 3;
  inline const ::std::string& topic() const;
  inline void set_topic(const ::std::string& value);
  inline void set_topic(const char* value);
  inline void set_topic(const char* value, size_t size);
  inline ::std::string* mutable_topic();
  
  // required int32 timeout = 4 [default = 0];
  inline bool has_timeout() const;
  inline void clear_timeout();
  static const int kTimeoutFieldNumber = 4;
  inline ::google::protobuf::int32 timeout() const;
  inline void set_timeout(::google::protobuf::int32 value);
  
  // required string timestamp = 5 [default = ""];
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  inline const ::std::string& timestamp() const;
  inline void set_timestamp(const ::std::string& value);
  inline void set_timestamp(const char* value);
  inline void set_timestamp(const char* value, size_t size);
  inline ::std::string* mutable_timestamp();
  
  // repeated .SensorPair SensorData = 6;
  inline int sensordata_size() const;
  inline void clear_sensordata();
  static const int kSensorDataFieldNumber = 6;
  inline const ::SensorPair& sensordata(int index) const;
  inline ::SensorPair* mutable_sensordata(int index);
  inline ::SensorPair* add_sensordata();
  inline const ::google::protobuf::RepeatedPtrField< ::SensorPair >&
      sensordata() const;
  inline ::google::protobuf::RepeatedPtrField< ::SensorPair >*
      mutable_sensordata();
  
  // @@protoc_insertion_point(class_scope:UltaSoundSensorsMessage)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* host_;
  static const ::std::string _default_host_;
  ::std::string* publisher_;
  static const ::std::string _default_publisher_;
  ::std::string* topic_;
  static const ::std::string _default_topic_;
  ::google::protobuf::int32 timeout_;
  ::std::string* timestamp_;
  static const ::std::string _default_timestamp_;
  ::google::protobuf::RepeatedPtrField< ::SensorPair > sensordata_;
  friend void  protobuf_AddDesc_SensorsMessage_2eproto();
  friend void protobuf_AssignDesc_SensorsMessage_2eproto();
  friend void protobuf_ShutdownFile_SensorsMessage_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static UltaSoundSensorsMessage* default_instance_;
};
// -------------------------------------------------------------------

class HeadJointSensorsMessage : public ::google::protobuf::Message {
 public:
  HeadJointSensorsMessage();
  virtual ~HeadJointSensorsMessage();
  
  HeadJointSensorsMessage(const HeadJointSensorsMessage& from);
  
  inline HeadJointSensorsMessage& operator=(const HeadJointSensorsMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const HeadJointSensorsMessage& default_instance();
  
  void Swap(HeadJointSensorsMessage* other);
  
  // implements Message ----------------------------------------------
  
  HeadJointSensorsMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeadJointSensorsMessage& from);
  void MergeFrom(const HeadJointSensorsMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string host = 1 [default = "localhost"];
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 1;
  inline const ::std::string& host() const;
  inline void set_host(const ::std::string& value);
  inline void set_host(const char* value);
  inline void set_host(const char* value, size_t size);
  inline ::std::string* mutable_host();
  
  // required string publisher = 2 [default = ""];
  inline bool has_publisher() const;
  inline void clear_publisher();
  static const int kPublisherFieldNumber = 2;
  inline const ::std::string& publisher() const;
  inline void set_publisher(const ::std::string& value);
  inline void set_publisher(const char* value);
  inline void set_publisher(const char* value, size_t size);
  inline ::std::string* mutable_publisher();
  
  // required string topic = 3 [default = "global"];
  inline bool has_topic() const;
  inline void clear_topic();
  static const int kTopicFieldNumber = 3;
  inline const ::std::string& topic() const;
  inline void set_topic(const ::std::string& value);
  inline void set_topic(const char* value);
  inline void set_topic(const char* value, size_t size);
  inline ::std::string* mutable_topic();
  
  // required int32 timeout = 4 [default = 0];
  inline bool has_timeout() const;
  inline void clear_timeout();
  static const int kTimeoutFieldNumber = 4;
  inline ::google::protobuf::int32 timeout() const;
  inline void set_timeout(::google::protobuf::int32 value);
  
  // required string timestamp = 5 [default = ""];
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  inline const ::std::string& timestamp() const;
  inline void set_timestamp(const ::std::string& value);
  inline void set_timestamp(const char* value);
  inline void set_timestamp(const char* value, size_t size);
  inline ::std::string* mutable_timestamp();
  
  // repeated .SensorPair SensorData = 6;
  inline int sensordata_size() const;
  inline void clear_sensordata();
  static const int kSensorDataFieldNumber = 6;
  inline const ::SensorPair& sensordata(int index) const;
  inline ::SensorPair* mutable_sensordata(int index);
  inline ::SensorPair* add_sensordata();
  inline const ::google::protobuf::RepeatedPtrField< ::SensorPair >&
      sensordata() const;
  inline ::google::protobuf::RepeatedPtrField< ::SensorPair >*
      mutable_sensordata();
  
  // @@protoc_insertion_point(class_scope:HeadJointSensorsMessage)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* host_;
  static const ::std::string _default_host_;
  ::std::string* publisher_;
  static const ::std::string _default_publisher_;
  ::std::string* topic_;
  static const ::std::string _default_topic_;
  ::google::protobuf::int32 timeout_;
  ::std::string* timestamp_;
  static const ::std::string _default_timestamp_;
  ::google::protobuf::RepeatedPtrField< ::SensorPair > sensordata_;
  friend void  protobuf_AddDesc_SensorsMessage_2eproto();
  friend void protobuf_AssignDesc_SensorsMessage_2eproto();
  friend void protobuf_ShutdownFile_SensorsMessage_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static HeadJointSensorsMessage* default_instance_;
};
// -------------------------------------------------------------------

class BodyJointSensorsMessage : public ::google::protobuf::Message {
 public:
  BodyJointSensorsMessage();
  virtual ~BodyJointSensorsMessage();
  
  BodyJointSensorsMessage(const BodyJointSensorsMessage& from);
  
  inline BodyJointSensorsMessage& operator=(const BodyJointSensorsMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BodyJointSensorsMessage& default_instance();
  
  void Swap(BodyJointSensorsMessage* other);
  
  // implements Message ----------------------------------------------
  
  BodyJointSensorsMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BodyJointSensorsMessage& from);
  void MergeFrom(const BodyJointSensorsMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string host = 1 [default = "localhost"];
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 1;
  inline const ::std::string& host() const;
  inline void set_host(const ::std::string& value);
  inline void set_host(const char* value);
  inline void set_host(const char* value, size_t size);
  inline ::std::string* mutable_host();
  
  // required string publisher = 2 [default = ""];
  inline bool has_publisher() const;
  inline void clear_publisher();
  static const int kPublisherFieldNumber = 2;
  inline const ::std::string& publisher() const;
  inline void set_publisher(const ::std::string& value);
  inline void set_publisher(const char* value);
  inline void set_publisher(const char* value, size_t size);
  inline ::std::string* mutable_publisher();
  
  // required string topic = 3 [default = "global"];
  inline bool has_topic() const;
  inline void clear_topic();
  static const int kTopicFieldNumber = 3;
  inline const ::std::string& topic() const;
  inline void set_topic(const ::std::string& value);
  inline void set_topic(const char* value);
  inline void set_topic(const char* value, size_t size);
  inline ::std::string* mutable_topic();
  
  // required int32 timeout = 4 [default = 0];
  inline bool has_timeout() const;
  inline void clear_timeout();
  static const int kTimeoutFieldNumber = 4;
  inline ::google::protobuf::int32 timeout() const;
  inline void set_timeout(::google::protobuf::int32 value);
  
  // required string timestamp = 5 [default = ""];
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  inline const ::std::string& timestamp() const;
  inline void set_timestamp(const ::std::string& value);
  inline void set_timestamp(const char* value);
  inline void set_timestamp(const char* value, size_t size);
  inline ::std::string* mutable_timestamp();
  
  // repeated .SensorPair SensorData = 6;
  inline int sensordata_size() const;
  inline void clear_sensordata();
  static const int kSensorDataFieldNumber = 6;
  inline const ::SensorPair& sensordata(int index) const;
  inline ::SensorPair* mutable_sensordata(int index);
  inline ::SensorPair* add_sensordata();
  inline const ::google::protobuf::RepeatedPtrField< ::SensorPair >&
      sensordata() const;
  inline ::google::protobuf::RepeatedPtrField< ::SensorPair >*
      mutable_sensordata();
  
  // @@protoc_insertion_point(class_scope:BodyJointSensorsMessage)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* host_;
  static const ::std::string _default_host_;
  ::std::string* publisher_;
  static const ::std::string _default_publisher_;
  ::std::string* topic_;
  static const ::std::string _default_topic_;
  ::google::protobuf::int32 timeout_;
  ::std::string* timestamp_;
  static const ::std::string _default_timestamp_;
  ::google::protobuf::RepeatedPtrField< ::SensorPair > sensordata_;
  friend void  protobuf_AddDesc_SensorsMessage_2eproto();
  friend void protobuf_AssignDesc_SensorsMessage_2eproto();
  friend void protobuf_ShutdownFile_SensorsMessage_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static BodyJointSensorsMessage* default_instance_;
};
// -------------------------------------------------------------------

class RobotPositionSensorMessage : public ::google::protobuf::Message {
 public:
  RobotPositionSensorMessage();
  virtual ~RobotPositionSensorMessage();
  
  RobotPositionSensorMessage(const RobotPositionSensorMessage& from);
  
  inline RobotPositionSensorMessage& operator=(const RobotPositionSensorMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RobotPositionSensorMessage& default_instance();
  
  void Swap(RobotPositionSensorMessage* other);
  
  // implements Message ----------------------------------------------
  
  RobotPositionSensorMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RobotPositionSensorMessage& from);
  void MergeFrom(const RobotPositionSensorMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string host = 1 [default = "localhost"];
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 1;
  inline const ::std::string& host() const;
  inline void set_host(const ::std::string& value);
  inline void set_host(const char* value);
  inline void set_host(const char* value, size_t size);
  inline ::std::string* mutable_host();
  
  // required string publisher = 2 [default = ""];
  inline bool has_publisher() const;
  inline void clear_publisher();
  static const int kPublisherFieldNumber = 2;
  inline const ::std::string& publisher() const;
  inline void set_publisher(const ::std::string& value);
  inline void set_publisher(const char* value);
  inline void set_publisher(const char* value, size_t size);
  inline ::std::string* mutable_publisher();
  
  // required string topic = 3 [default = "global"];
  inline bool has_topic() const;
  inline void clear_topic();
  static const int kTopicFieldNumber = 3;
  inline const ::std::string& topic() const;
  inline void set_topic(const ::std::string& value);
  inline void set_topic(const char* value);
  inline void set_topic(const char* value, size_t size);
  inline ::std::string* mutable_topic();
  
  // required int32 timeout = 4 [default = 0];
  inline bool has_timeout() const;
  inline void clear_timeout();
  static const int kTimeoutFieldNumber = 4;
  inline ::google::protobuf::int32 timeout() const;
  inline void set_timeout(::google::protobuf::int32 value);
  
  // required string timestamp = 5 [default = ""];
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  inline const ::std::string& timestamp() const;
  inline void set_timestamp(const ::std::string& value);
  inline void set_timestamp(const char* value);
  inline void set_timestamp(const char* value, size_t size);
  inline ::std::string* mutable_timestamp();
  
  // repeated .SensorPair SensorData = 6;
  inline int sensordata_size() const;
  inline void clear_sensordata();
  static const int kSensorDataFieldNumber = 6;
  inline const ::SensorPair& sensordata(int index) const;
  inline ::SensorPair* mutable_sensordata(int index);
  inline ::SensorPair* add_sensordata();
  inline const ::google::protobuf::RepeatedPtrField< ::SensorPair >&
      sensordata() const;
  inline ::google::protobuf::RepeatedPtrField< ::SensorPair >*
      mutable_sensordata();
  
  // @@protoc_insertion_point(class_scope:RobotPositionSensorMessage)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* host_;
  static const ::std::string _default_host_;
  ::std::string* publisher_;
  static const ::std::string _default_publisher_;
  ::std::string* topic_;
  static const ::std::string _default_topic_;
  ::google::protobuf::int32 timeout_;
  ::std::string* timestamp_;
  static const ::std::string _default_timestamp_;
  ::google::protobuf::RepeatedPtrField< ::SensorPair > sensordata_;
  friend void  protobuf_AddDesc_SensorsMessage_2eproto();
  friend void protobuf_AssignDesc_SensorsMessage_2eproto();
  friend void protobuf_ShutdownFile_SensorsMessage_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RobotPositionSensorMessage* default_instance_;
};
// -------------------------------------------------------------------

class SensorPair : public ::google::protobuf::Message {
 public:
  SensorPair();
  virtual ~SensorPair();
  
  SensorPair(const SensorPair& from);
  
  inline SensorPair& operator=(const SensorPair& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SensorPair& default_instance();
  
  void Swap(SensorPair* other);
  
  // implements Message ----------------------------------------------
  
  SensorPair* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SensorPair& from);
  void MergeFrom(const SensorPair& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string SensorName = 1 [default = ""];
  inline bool has_sensorname() const;
  inline void clear_sensorname();
  static const int kSensorNameFieldNumber = 1;
  inline const ::std::string& sensorname() const;
  inline void set_sensorname(const ::std::string& value);
  inline void set_sensorname(const char* value);
  inline void set_sensorname(const char* value, size_t size);
  inline ::std::string* mutable_sensorname();
  
  // required float SensorValue = 2;
  inline bool has_sensorvalue() const;
  inline void clear_sensorvalue();
  static const int kSensorValueFieldNumber = 2;
  inline float sensorvalue() const;
  inline void set_sensorvalue(float value);
  
  // optional float SensorValueDiff = 3;
  inline bool has_sensorvaluediff() const;
  inline void clear_sensorvaluediff();
  static const int kSensorValueDiffFieldNumber = 3;
  inline float sensorvaluediff() const;
  inline void set_sensorvaluediff(float value);
  
  // optional uint32 SensorTimeDiff = 4;
  inline bool has_sensortimediff() const;
  inline void clear_sensortimediff();
  static const int kSensorTimeDiffFieldNumber = 4;
  inline ::google::protobuf::uint32 sensortimediff() const;
  inline void set_sensortimediff(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:SensorPair)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* sensorname_;
  static const ::std::string _default_sensorname_;
  float sensorvalue_;
  float sensorvaluediff_;
  ::google::protobuf::uint32 sensortimediff_;
  friend void  protobuf_AddDesc_SensorsMessage_2eproto();
  friend void protobuf_AssignDesc_SensorsMessage_2eproto();
  friend void protobuf_ShutdownFile_SensorsMessage_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SensorPair* default_instance_;
};
// ===================================================================


// ===================================================================

// InertialSensorsMessage

// required string host = 1 [default = "localhost"];
inline bool InertialSensorsMessage::has_host() const {
  return _has_bit(0);
}
inline void InertialSensorsMessage::clear_host() {
  if (host_ != &_default_host_) {
    host_->assign(_default_host_);
  }
  _clear_bit(0);
}
inline const ::std::string& InertialSensorsMessage::host() const {
  return *host_;
}
inline void InertialSensorsMessage::set_host(const ::std::string& value) {
  _set_bit(0);
  if (host_ == &_default_host_) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void InertialSensorsMessage::set_host(const char* value) {
  _set_bit(0);
  if (host_ == &_default_host_) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void InertialSensorsMessage::set_host(const char* value, size_t size) {
  _set_bit(0);
  if (host_ == &_default_host_) {
    host_ = new ::std::string;
  }
  host_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InertialSensorsMessage::mutable_host() {
  _set_bit(0);
  if (host_ == &_default_host_) {
    host_ = new ::std::string(_default_host_);
  }
  return host_;
}

// required string publisher = 2 [default = ""];
inline bool InertialSensorsMessage::has_publisher() const {
  return _has_bit(1);
}
inline void InertialSensorsMessage::clear_publisher() {
  if (publisher_ != &_default_publisher_) {
    publisher_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& InertialSensorsMessage::publisher() const {
  return *publisher_;
}
inline void InertialSensorsMessage::set_publisher(const ::std::string& value) {
  _set_bit(1);
  if (publisher_ == &_default_publisher_) {
    publisher_ = new ::std::string;
  }
  publisher_->assign(value);
}
inline void InertialSensorsMessage::set_publisher(const char* value) {
  _set_bit(1);
  if (publisher_ == &_default_publisher_) {
    publisher_ = new ::std::string;
  }
  publisher_->assign(value);
}
inline void InertialSensorsMessage::set_publisher(const char* value, size_t size) {
  _set_bit(1);
  if (publisher_ == &_default_publisher_) {
    publisher_ = new ::std::string;
  }
  publisher_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InertialSensorsMessage::mutable_publisher() {
  _set_bit(1);
  if (publisher_ == &_default_publisher_) {
    publisher_ = new ::std::string;
  }
  return publisher_;
}

// required string topic = 3 [default = "global"];
inline bool InertialSensorsMessage::has_topic() const {
  return _has_bit(2);
}
inline void InertialSensorsMessage::clear_topic() {
  if (topic_ != &_default_topic_) {
    topic_->assign(_default_topic_);
  }
  _clear_bit(2);
}
inline const ::std::string& InertialSensorsMessage::topic() const {
  return *topic_;
}
inline void InertialSensorsMessage::set_topic(const ::std::string& value) {
  _set_bit(2);
  if (topic_ == &_default_topic_) {
    topic_ = new ::std::string;
  }
  topic_->assign(value);
}
inline void InertialSensorsMessage::set_topic(const char* value) {
  _set_bit(2);
  if (topic_ == &_default_topic_) {
    topic_ = new ::std::string;
  }
  topic_->assign(value);
}
inline void InertialSensorsMessage::set_topic(const char* value, size_t size) {
  _set_bit(2);
  if (topic_ == &_default_topic_) {
    topic_ = new ::std::string;
  }
  topic_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InertialSensorsMessage::mutable_topic() {
  _set_bit(2);
  if (topic_ == &_default_topic_) {
    topic_ = new ::std::string(_default_topic_);
  }
  return topic_;
}

// required int32 timeout = 4 [default = 0];
inline bool InertialSensorsMessage::has_timeout() const {
  return _has_bit(3);
}
inline void InertialSensorsMessage::clear_timeout() {
  timeout_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 InertialSensorsMessage::timeout() const {
  return timeout_;
}
inline void InertialSensorsMessage::set_timeout(::google::protobuf::int32 value) {
  _set_bit(3);
  timeout_ = value;
}

// required string timestamp = 5 [default = ""];
inline bool InertialSensorsMessage::has_timestamp() const {
  return _has_bit(4);
}
inline void InertialSensorsMessage::clear_timestamp() {
  if (timestamp_ != &_default_timestamp_) {
    timestamp_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& InertialSensorsMessage::timestamp() const {
  return *timestamp_;
}
inline void InertialSensorsMessage::set_timestamp(const ::std::string& value) {
  _set_bit(4);
  if (timestamp_ == &_default_timestamp_) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void InertialSensorsMessage::set_timestamp(const char* value) {
  _set_bit(4);
  if (timestamp_ == &_default_timestamp_) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void InertialSensorsMessage::set_timestamp(const char* value, size_t size) {
  _set_bit(4);
  if (timestamp_ == &_default_timestamp_) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InertialSensorsMessage::mutable_timestamp() {
  _set_bit(4);
  if (timestamp_ == &_default_timestamp_) {
    timestamp_ = new ::std::string;
  }
  return timestamp_;
}

// repeated .SensorPair SensorData = 6;
inline int InertialSensorsMessage::sensordata_size() const {
  return sensordata_.size();
}
inline void InertialSensorsMessage::clear_sensordata() {
  sensordata_.Clear();
}
inline const ::SensorPair& InertialSensorsMessage::sensordata(int index) const {
  return sensordata_.Get(index);
}
inline ::SensorPair* InertialSensorsMessage::mutable_sensordata(int index) {
  return sensordata_.Mutable(index);
}
inline ::SensorPair* InertialSensorsMessage::add_sensordata() {
  return sensordata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SensorPair >&
InertialSensorsMessage::sensordata() const {
  return sensordata_;
}
inline ::google::protobuf::RepeatedPtrField< ::SensorPair >*
InertialSensorsMessage::mutable_sensordata() {
  return &sensordata_;
}

// -------------------------------------------------------------------

// FSRSensorsMessage

// required string host = 1 [default = "localhost"];
inline bool FSRSensorsMessage::has_host() const {
  return _has_bit(0);
}
inline void FSRSensorsMessage::clear_host() {
  if (host_ != &_default_host_) {
    host_->assign(_default_host_);
  }
  _clear_bit(0);
}
inline const ::std::string& FSRSensorsMessage::host() const {
  return *host_;
}
inline void FSRSensorsMessage::set_host(const ::std::string& value) {
  _set_bit(0);
  if (host_ == &_default_host_) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void FSRSensorsMessage::set_host(const char* value) {
  _set_bit(0);
  if (host_ == &_default_host_) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void FSRSensorsMessage::set_host(const char* value, size_t size) {
  _set_bit(0);
  if (host_ == &_default_host_) {
    host_ = new ::std::string;
  }
  host_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FSRSensorsMessage::mutable_host() {
  _set_bit(0);
  if (host_ == &_default_host_) {
    host_ = new ::std::string(_default_host_);
  }
  return host_;
}

// required string publisher = 2 [default = ""];
inline bool FSRSensorsMessage::has_publisher() const {
  return _has_bit(1);
}
inline void FSRSensorsMessage::clear_publisher() {
  if (publisher_ != &_default_publisher_) {
    publisher_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& FSRSensorsMessage::publisher() const {
  return *publisher_;
}
inline void FSRSensorsMessage::set_publisher(const ::std::string& value) {
  _set_bit(1);
  if (publisher_ == &_default_publisher_) {
    publisher_ = new ::std::string;
  }
  publisher_->assign(value);
}
inline void FSRSensorsMessage::set_publisher(const char* value) {
  _set_bit(1);
  if (publisher_ == &_default_publisher_) {
    publisher_ = new ::std::string;
  }
  publisher_->assign(value);
}
inline void FSRSensorsMessage::set_publisher(const char* value, size_t size) {
  _set_bit(1);
  if (publisher_ == &_default_publisher_) {
    publisher_ = new ::std::string;
  }
  publisher_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FSRSensorsMessage::mutable_publisher() {
  _set_bit(1);
  if (publisher_ == &_default_publisher_) {
    publisher_ = new ::std::string;
  }
  return publisher_;
}

// required string topic = 3 [default = "global"];
inline bool FSRSensorsMessage::has_topic() const {
  return _has_bit(2);
}
inline void FSRSensorsMessage::clear_topic() {
  if (topic_ != &_default_topic_) {
    topic_->assign(_default_topic_);
  }
  _clear_bit(2);
}
inline const ::std::string& FSRSensorsMessage::topic() const {
  return *topic_;
}
inline void FSRSensorsMessage::set_topic(const ::std::string& value) {
  _set_bit(2);
  if (topic_ == &_default_topic_) {
    topic_ = new ::std::string;
  }
  topic_->assign(value);
}
inline void FSRSensorsMessage::set_topic(const char* value) {
  _set_bit(2);
  if (topic_ == &_default_topic_) {
    topic_ = new ::std::string;
  }
  topic_->assign(value);
}
inline void FSRSensorsMessage::set_topic(const char* value, size_t size) {
  _set_bit(2);
  if (topic_ == &_default_topic_) {
    topic_ = new ::std::string;
  }
  topic_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FSRSensorsMessage::mutable_topic() {
  _set_bit(2);
  if (topic_ == &_default_topic_) {
    topic_ = new ::std::string(_default_topic_);
  }
  return topic_;
}

// required int32 timeout = 4 [default = 0];
inline bool FSRSensorsMessage::has_timeout() const {
  return _has_bit(3);
}
inline void FSRSensorsMessage::clear_timeout() {
  timeout_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 FSRSensorsMessage::timeout() const {
  return timeout_;
}
inline void FSRSensorsMessage::set_timeout(::google::protobuf::int32 value) {
  _set_bit(3);
  timeout_ = value;
}

// required string timestamp = 5 [default = ""];
inline bool FSRSensorsMessage::has_timestamp() const {
  return _has_bit(4);
}
inline void FSRSensorsMessage::clear_timestamp() {
  if (timestamp_ != &_default_timestamp_) {
    timestamp_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& FSRSensorsMessage::timestamp() const {
  return *timestamp_;
}
inline void FSRSensorsMessage::set_timestamp(const ::std::string& value) {
  _set_bit(4);
  if (timestamp_ == &_default_timestamp_) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void FSRSensorsMessage::set_timestamp(const char* value) {
  _set_bit(4);
  if (timestamp_ == &_default_timestamp_) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void FSRSensorsMessage::set_timestamp(const char* value, size_t size) {
  _set_bit(4);
  if (timestamp_ == &_default_timestamp_) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FSRSensorsMessage::mutable_timestamp() {
  _set_bit(4);
  if (timestamp_ == &_default_timestamp_) {
    timestamp_ = new ::std::string;
  }
  return timestamp_;
}

// repeated .SensorPair SensorData = 6;
inline int FSRSensorsMessage::sensordata_size() const {
  return sensordata_.size();
}
inline void FSRSensorsMessage::clear_sensordata() {
  sensordata_.Clear();
}
inline const ::SensorPair& FSRSensorsMessage::sensordata(int index) const {
  return sensordata_.Get(index);
}
inline ::SensorPair* FSRSensorsMessage::mutable_sensordata(int index) {
  return sensordata_.Mutable(index);
}
inline ::SensorPair* FSRSensorsMessage::add_sensordata() {
  return sensordata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SensorPair >&
FSRSensorsMessage::sensordata() const {
  return sensordata_;
}
inline ::google::protobuf::RepeatedPtrField< ::SensorPair >*
FSRSensorsMessage::mutable_sensordata() {
  return &sensordata_;
}

// -------------------------------------------------------------------

// UltaSoundSensorsMessage

// required string host = 1 [default = "localhost"];
inline bool UltaSoundSensorsMessage::has_host() const {
  return _has_bit(0);
}
inline void UltaSoundSensorsMessage::clear_host() {
  if (host_ != &_default_host_) {
    host_->assign(_default_host_);
  }
  _clear_bit(0);
}
inline const ::std::string& UltaSoundSensorsMessage::host() const {
  return *host_;
}
inline void UltaSoundSensorsMessage::set_host(const ::std::string& value) {
  _set_bit(0);
  if (host_ == &_default_host_) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void UltaSoundSensorsMessage::set_host(const char* value) {
  _set_bit(0);
  if (host_ == &_default_host_) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void UltaSoundSensorsMessage::set_host(const char* value, size_t size) {
  _set_bit(0);
  if (host_ == &_default_host_) {
    host_ = new ::std::string;
  }
  host_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UltaSoundSensorsMessage::mutable_host() {
  _set_bit(0);
  if (host_ == &_default_host_) {
    host_ = new ::std::string(_default_host_);
  }
  return host_;
}

// required string publisher = 2 [default = ""];
inline bool UltaSoundSensorsMessage::has_publisher() const {
  return _has_bit(1);
}
inline void UltaSoundSensorsMessage::clear_publisher() {
  if (publisher_ != &_default_publisher_) {
    publisher_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& UltaSoundSensorsMessage::publisher() const {
  return *publisher_;
}
inline void UltaSoundSensorsMessage::set_publisher(const ::std::string& value) {
  _set_bit(1);
  if (publisher_ == &_default_publisher_) {
    publisher_ = new ::std::string;
  }
  publisher_->assign(value);
}
inline void UltaSoundSensorsMessage::set_publisher(const char* value) {
  _set_bit(1);
  if (publisher_ == &_default_publisher_) {
    publisher_ = new ::std::string;
  }
  publisher_->assign(value);
}
inline void UltaSoundSensorsMessage::set_publisher(const char* value, size_t size) {
  _set_bit(1);
  if (publisher_ == &_default_publisher_) {
    publisher_ = new ::std::string;
  }
  publisher_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UltaSoundSensorsMessage::mutable_publisher() {
  _set_bit(1);
  if (publisher_ == &_default_publisher_) {
    publisher_ = new ::std::string;
  }
  return publisher_;
}

// required string topic = 3 [default = "global"];
inline bool UltaSoundSensorsMessage::has_topic() const {
  return _has_bit(2);
}
inline void UltaSoundSensorsMessage::clear_topic() {
  if (topic_ != &_default_topic_) {
    topic_->assign(_default_topic_);
  }
  _clear_bit(2);
}
inline const ::std::string& UltaSoundSensorsMessage::topic() const {
  return *topic_;
}
inline void UltaSoundSensorsMessage::set_topic(const ::std::string& value) {
  _set_bit(2);
  if (topic_ == &_default_topic_) {
    topic_ = new ::std::string;
  }
  topic_->assign(value);
}
inline void UltaSoundSensorsMessage::set_topic(const char* value) {
  _set_bit(2);
  if (topic_ == &_default_topic_) {
    topic_ = new ::std::string;
  }
  topic_->assign(value);
}
inline void UltaSoundSensorsMessage::set_topic(const char* value, size_t size) {
  _set_bit(2);
  if (topic_ == &_default_topic_) {
    topic_ = new ::std::string;
  }
  topic_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UltaSoundSensorsMessage::mutable_topic() {
  _set_bit(2);
  if (topic_ == &_default_topic_) {
    topic_ = new ::std::string(_default_topic_);
  }
  return topic_;
}

// required int32 timeout = 4 [default = 0];
inline bool UltaSoundSensorsMessage::has_timeout() const {
  return _has_bit(3);
}
inline void UltaSoundSensorsMessage::clear_timeout() {
  timeout_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 UltaSoundSensorsMessage::timeout() const {
  return timeout_;
}
inline void UltaSoundSensorsMessage::set_timeout(::google::protobuf::int32 value) {
  _set_bit(3);
  timeout_ = value;
}

// required string timestamp = 5 [default = ""];
inline bool UltaSoundSensorsMessage::has_timestamp() const {
  return _has_bit(4);
}
inline void UltaSoundSensorsMessage::clear_timestamp() {
  if (timestamp_ != &_default_timestamp_) {
    timestamp_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& UltaSoundSensorsMessage::timestamp() const {
  return *timestamp_;
}
inline void UltaSoundSensorsMessage::set_timestamp(const ::std::string& value) {
  _set_bit(4);
  if (timestamp_ == &_default_timestamp_) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void UltaSoundSensorsMessage::set_timestamp(const char* value) {
  _set_bit(4);
  if (timestamp_ == &_default_timestamp_) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void UltaSoundSensorsMessage::set_timestamp(const char* value, size_t size) {
  _set_bit(4);
  if (timestamp_ == &_default_timestamp_) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UltaSoundSensorsMessage::mutable_timestamp() {
  _set_bit(4);
  if (timestamp_ == &_default_timestamp_) {
    timestamp_ = new ::std::string;
  }
  return timestamp_;
}

// repeated .SensorPair SensorData = 6;
inline int UltaSoundSensorsMessage::sensordata_size() const {
  return sensordata_.size();
}
inline void UltaSoundSensorsMessage::clear_sensordata() {
  sensordata_.Clear();
}
inline const ::SensorPair& UltaSoundSensorsMessage::sensordata(int index) const {
  return sensordata_.Get(index);
}
inline ::SensorPair* UltaSoundSensorsMessage::mutable_sensordata(int index) {
  return sensordata_.Mutable(index);
}
inline ::SensorPair* UltaSoundSensorsMessage::add_sensordata() {
  return sensordata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SensorPair >&
UltaSoundSensorsMessage::sensordata() const {
  return sensordata_;
}
inline ::google::protobuf::RepeatedPtrField< ::SensorPair >*
UltaSoundSensorsMessage::mutable_sensordata() {
  return &sensordata_;
}

// -------------------------------------------------------------------

// HeadJointSensorsMessage

// required string host = 1 [default = "localhost"];
inline bool HeadJointSensorsMessage::has_host() const {
  return _has_bit(0);
}
inline void HeadJointSensorsMessage::clear_host() {
  if (host_ != &_default_host_) {
    host_->assign(_default_host_);
  }
  _clear_bit(0);
}
inline const ::std::string& HeadJointSensorsMessage::host() const {
  return *host_;
}
inline void HeadJointSensorsMessage::set_host(const ::std::string& value) {
  _set_bit(0);
  if (host_ == &_default_host_) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void HeadJointSensorsMessage::set_host(const char* value) {
  _set_bit(0);
  if (host_ == &_default_host_) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void HeadJointSensorsMessage::set_host(const char* value, size_t size) {
  _set_bit(0);
  if (host_ == &_default_host_) {
    host_ = new ::std::string;
  }
  host_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HeadJointSensorsMessage::mutable_host() {
  _set_bit(0);
  if (host_ == &_default_host_) {
    host_ = new ::std::string(_default_host_);
  }
  return host_;
}

// required string publisher = 2 [default = ""];
inline bool HeadJointSensorsMessage::has_publisher() const {
  return _has_bit(1);
}
inline void HeadJointSensorsMessage::clear_publisher() {
  if (publisher_ != &_default_publisher_) {
    publisher_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& HeadJointSensorsMessage::publisher() const {
  return *publisher_;
}
inline void HeadJointSensorsMessage::set_publisher(const ::std::string& value) {
  _set_bit(1);
  if (publisher_ == &_default_publisher_) {
    publisher_ = new ::std::string;
  }
  publisher_->assign(value);
}
inline void HeadJointSensorsMessage::set_publisher(const char* value) {
  _set_bit(1);
  if (publisher_ == &_default_publisher_) {
    publisher_ = new ::std::string;
  }
  publisher_->assign(value);
}
inline void HeadJointSensorsMessage::set_publisher(const char* value, size_t size) {
  _set_bit(1);
  if (publisher_ == &_default_publisher_) {
    publisher_ = new ::std::string;
  }
  publisher_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HeadJointSensorsMessage::mutable_publisher() {
  _set_bit(1);
  if (publisher_ == &_default_publisher_) {
    publisher_ = new ::std::string;
  }
  return publisher_;
}

// required string topic = 3 [default = "global"];
inline bool HeadJointSensorsMessage::has_topic() const {
  return _has_bit(2);
}
inline void HeadJointSensorsMessage::clear_topic() {
  if (topic_ != &_default_topic_) {
    topic_->assign(_default_topic_);
  }
  _clear_bit(2);
}
inline const ::std::string& HeadJointSensorsMessage::topic() const {
  return *topic_;
}
inline void HeadJointSensorsMessage::set_topic(const ::std::string& value) {
  _set_bit(2);
  if (topic_ == &_default_topic_) {
    topic_ = new ::std::string;
  }
  topic_->assign(value);
}
inline void HeadJointSensorsMessage::set_topic(const char* value) {
  _set_bit(2);
  if (topic_ == &_default_topic_) {
    topic_ = new ::std::string;
  }
  topic_->assign(value);
}
inline void HeadJointSensorsMessage::set_topic(const char* value, size_t size) {
  _set_bit(2);
  if (topic_ == &_default_topic_) {
    topic_ = new ::std::string;
  }
  topic_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HeadJointSensorsMessage::mutable_topic() {
  _set_bit(2);
  if (topic_ == &_default_topic_) {
    topic_ = new ::std::string(_default_topic_);
  }
  return topic_;
}

// required int32 timeout = 4 [default = 0];
inline bool HeadJointSensorsMessage::has_timeout() const {
  return _has_bit(3);
}
inline void HeadJointSensorsMessage::clear_timeout() {
  timeout_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 HeadJointSensorsMessage::timeout() const {
  return timeout_;
}
inline void HeadJointSensorsMessage::set_timeout(::google::protobuf::int32 value) {
  _set_bit(3);
  timeout_ = value;
}

// required string timestamp = 5 [default = ""];
inline bool HeadJointSensorsMessage::has_timestamp() const {
  return _has_bit(4);
}
inline void HeadJointSensorsMessage::clear_timestamp() {
  if (timestamp_ != &_default_timestamp_) {
    timestamp_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& HeadJointSensorsMessage::timestamp() const {
  return *timestamp_;
}
inline void HeadJointSensorsMessage::set_timestamp(const ::std::string& value) {
  _set_bit(4);
  if (timestamp_ == &_default_timestamp_) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void HeadJointSensorsMessage::set_timestamp(const char* value) {
  _set_bit(4);
  if (timestamp_ == &_default_timestamp_) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void HeadJointSensorsMessage::set_timestamp(const char* value, size_t size) {
  _set_bit(4);
  if (timestamp_ == &_default_timestamp_) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HeadJointSensorsMessage::mutable_timestamp() {
  _set_bit(4);
  if (timestamp_ == &_default_timestamp_) {
    timestamp_ = new ::std::string;
  }
  return timestamp_;
}

// repeated .SensorPair SensorData = 6;
inline int HeadJointSensorsMessage::sensordata_size() const {
  return sensordata_.size();
}
inline void HeadJointSensorsMessage::clear_sensordata() {
  sensordata_.Clear();
}
inline const ::SensorPair& HeadJointSensorsMessage::sensordata(int index) const {
  return sensordata_.Get(index);
}
inline ::SensorPair* HeadJointSensorsMessage::mutable_sensordata(int index) {
  return sensordata_.Mutable(index);
}
inline ::SensorPair* HeadJointSensorsMessage::add_sensordata() {
  return sensordata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SensorPair >&
HeadJointSensorsMessage::sensordata() const {
  return sensordata_;
}
inline ::google::protobuf::RepeatedPtrField< ::SensorPair >*
HeadJointSensorsMessage::mutable_sensordata() {
  return &sensordata_;
}

// -------------------------------------------------------------------

// BodyJointSensorsMessage

// required string host = 1 [default = "localhost"];
inline bool BodyJointSensorsMessage::has_host() const {
  return _has_bit(0);
}
inline void BodyJointSensorsMessage::clear_host() {
  if (host_ != &_default_host_) {
    host_->assign(_default_host_);
  }
  _clear_bit(0);
}
inline const ::std::string& BodyJointSensorsMessage::host() const {
  return *host_;
}
inline void BodyJointSensorsMessage::set_host(const ::std::string& value) {
  _set_bit(0);
  if (host_ == &_default_host_) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void BodyJointSensorsMessage::set_host(const char* value) {
  _set_bit(0);
  if (host_ == &_default_host_) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void BodyJointSensorsMessage::set_host(const char* value, size_t size) {
  _set_bit(0);
  if (host_ == &_default_host_) {
    host_ = new ::std::string;
  }
  host_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BodyJointSensorsMessage::mutable_host() {
  _set_bit(0);
  if (host_ == &_default_host_) {
    host_ = new ::std::string(_default_host_);
  }
  return host_;
}

// required string publisher = 2 [default = ""];
inline bool BodyJointSensorsMessage::has_publisher() const {
  return _has_bit(1);
}
inline void BodyJointSensorsMessage::clear_publisher() {
  if (publisher_ != &_default_publisher_) {
    publisher_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& BodyJointSensorsMessage::publisher() const {
  return *publisher_;
}
inline void BodyJointSensorsMessage::set_publisher(const ::std::string& value) {
  _set_bit(1);
  if (publisher_ == &_default_publisher_) {
    publisher_ = new ::std::string;
  }
  publisher_->assign(value);
}
inline void BodyJointSensorsMessage::set_publisher(const char* value) {
  _set_bit(1);
  if (publisher_ == &_default_publisher_) {
    publisher_ = new ::std::string;
  }
  publisher_->assign(value);
}
inline void BodyJointSensorsMessage::set_publisher(const char* value, size_t size) {
  _set_bit(1);
  if (publisher_ == &_default_publisher_) {
    publisher_ = new ::std::string;
  }
  publisher_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BodyJointSensorsMessage::mutable_publisher() {
  _set_bit(1);
  if (publisher_ == &_default_publisher_) {
    publisher_ = new ::std::string;
  }
  return publisher_;
}

// required string topic = 3 [default = "global"];
inline bool BodyJointSensorsMessage::has_topic() const {
  return _has_bit(2);
}
inline void BodyJointSensorsMessage::clear_topic() {
  if (topic_ != &_default_topic_) {
    topic_->assign(_default_topic_);
  }
  _clear_bit(2);
}
inline const ::std::string& BodyJointSensorsMessage::topic() const {
  return *topic_;
}
inline void BodyJointSensorsMessage::set_topic(const ::std::string& value) {
  _set_bit(2);
  if (topic_ == &_default_topic_) {
    topic_ = new ::std::string;
  }
  topic_->assign(value);
}
inline void BodyJointSensorsMessage::set_topic(const char* value) {
  _set_bit(2);
  if (topic_ == &_default_topic_) {
    topic_ = new ::std::string;
  }
  topic_->assign(value);
}
inline void BodyJointSensorsMessage::set_topic(const char* value, size_t size) {
  _set_bit(2);
  if (topic_ == &_default_topic_) {
    topic_ = new ::std::string;
  }
  topic_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BodyJointSensorsMessage::mutable_topic() {
  _set_bit(2);
  if (topic_ == &_default_topic_) {
    topic_ = new ::std::string(_default_topic_);
  }
  return topic_;
}

// required int32 timeout = 4 [default = 0];
inline bool BodyJointSensorsMessage::has_timeout() const {
  return _has_bit(3);
}
inline void BodyJointSensorsMessage::clear_timeout() {
  timeout_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 BodyJointSensorsMessage::timeout() const {
  return timeout_;
}
inline void BodyJointSensorsMessage::set_timeout(::google::protobuf::int32 value) {
  _set_bit(3);
  timeout_ = value;
}

// required string timestamp = 5 [default = ""];
inline bool BodyJointSensorsMessage::has_timestamp() const {
  return _has_bit(4);
}
inline void BodyJointSensorsMessage::clear_timestamp() {
  if (timestamp_ != &_default_timestamp_) {
    timestamp_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& BodyJointSensorsMessage::timestamp() const {
  return *timestamp_;
}
inline void BodyJointSensorsMessage::set_timestamp(const ::std::string& value) {
  _set_bit(4);
  if (timestamp_ == &_default_timestamp_) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void BodyJointSensorsMessage::set_timestamp(const char* value) {
  _set_bit(4);
  if (timestamp_ == &_default_timestamp_) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void BodyJointSensorsMessage::set_timestamp(const char* value, size_t size) {
  _set_bit(4);
  if (timestamp_ == &_default_timestamp_) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BodyJointSensorsMessage::mutable_timestamp() {
  _set_bit(4);
  if (timestamp_ == &_default_timestamp_) {
    timestamp_ = new ::std::string;
  }
  return timestamp_;
}

// repeated .SensorPair SensorData = 6;
inline int BodyJointSensorsMessage::sensordata_size() const {
  return sensordata_.size();
}
inline void BodyJointSensorsMessage::clear_sensordata() {
  sensordata_.Clear();
}
inline const ::SensorPair& BodyJointSensorsMessage::sensordata(int index) const {
  return sensordata_.Get(index);
}
inline ::SensorPair* BodyJointSensorsMessage::mutable_sensordata(int index) {
  return sensordata_.Mutable(index);
}
inline ::SensorPair* BodyJointSensorsMessage::add_sensordata() {
  return sensordata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SensorPair >&
BodyJointSensorsMessage::sensordata() const {
  return sensordata_;
}
inline ::google::protobuf::RepeatedPtrField< ::SensorPair >*
BodyJointSensorsMessage::mutable_sensordata() {
  return &sensordata_;
}

// -------------------------------------------------------------------

// RobotPositionSensorMessage

// required string host = 1 [default = "localhost"];
inline bool RobotPositionSensorMessage::has_host() const {
  return _has_bit(0);
}
inline void RobotPositionSensorMessage::clear_host() {
  if (host_ != &_default_host_) {
    host_->assign(_default_host_);
  }
  _clear_bit(0);
}
inline const ::std::string& RobotPositionSensorMessage::host() const {
  return *host_;
}
inline void RobotPositionSensorMessage::set_host(const ::std::string& value) {
  _set_bit(0);
  if (host_ == &_default_host_) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void RobotPositionSensorMessage::set_host(const char* value) {
  _set_bit(0);
  if (host_ == &_default_host_) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void RobotPositionSensorMessage::set_host(const char* value, size_t size) {
  _set_bit(0);
  if (host_ == &_default_host_) {
    host_ = new ::std::string;
  }
  host_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RobotPositionSensorMessage::mutable_host() {
  _set_bit(0);
  if (host_ == &_default_host_) {
    host_ = new ::std::string(_default_host_);
  }
  return host_;
}

// required string publisher = 2 [default = ""];
inline bool RobotPositionSensorMessage::has_publisher() const {
  return _has_bit(1);
}
inline void RobotPositionSensorMessage::clear_publisher() {
  if (publisher_ != &_default_publisher_) {
    publisher_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& RobotPositionSensorMessage::publisher() const {
  return *publisher_;
}
inline void RobotPositionSensorMessage::set_publisher(const ::std::string& value) {
  _set_bit(1);
  if (publisher_ == &_default_publisher_) {
    publisher_ = new ::std::string;
  }
  publisher_->assign(value);
}
inline void RobotPositionSensorMessage::set_publisher(const char* value) {
  _set_bit(1);
  if (publisher_ == &_default_publisher_) {
    publisher_ = new ::std::string;
  }
  publisher_->assign(value);
}
inline void RobotPositionSensorMessage::set_publisher(const char* value, size_t size) {
  _set_bit(1);
  if (publisher_ == &_default_publisher_) {
    publisher_ = new ::std::string;
  }
  publisher_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RobotPositionSensorMessage::mutable_publisher() {
  _set_bit(1);
  if (publisher_ == &_default_publisher_) {
    publisher_ = new ::std::string;
  }
  return publisher_;
}

// required string topic = 3 [default = "global"];
inline bool RobotPositionSensorMessage::has_topic() const {
  return _has_bit(2);
}
inline void RobotPositionSensorMessage::clear_topic() {
  if (topic_ != &_default_topic_) {
    topic_->assign(_default_topic_);
  }
  _clear_bit(2);
}
inline const ::std::string& RobotPositionSensorMessage::topic() const {
  return *topic_;
}
inline void RobotPositionSensorMessage::set_topic(const ::std::string& value) {
  _set_bit(2);
  if (topic_ == &_default_topic_) {
    topic_ = new ::std::string;
  }
  topic_->assign(value);
}
inline void RobotPositionSensorMessage::set_topic(const char* value) {
  _set_bit(2);
  if (topic_ == &_default_topic_) {
    topic_ = new ::std::string;
  }
  topic_->assign(value);
}
inline void RobotPositionSensorMessage::set_topic(const char* value, size_t size) {
  _set_bit(2);
  if (topic_ == &_default_topic_) {
    topic_ = new ::std::string;
  }
  topic_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RobotPositionSensorMessage::mutable_topic() {
  _set_bit(2);
  if (topic_ == &_default_topic_) {
    topic_ = new ::std::string(_default_topic_);
  }
  return topic_;
}

// required int32 timeout = 4 [default = 0];
inline bool RobotPositionSensorMessage::has_timeout() const {
  return _has_bit(3);
}
inline void RobotPositionSensorMessage::clear_timeout() {
  timeout_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 RobotPositionSensorMessage::timeout() const {
  return timeout_;
}
inline void RobotPositionSensorMessage::set_timeout(::google::protobuf::int32 value) {
  _set_bit(3);
  timeout_ = value;
}

// required string timestamp = 5 [default = ""];
inline bool RobotPositionSensorMessage::has_timestamp() const {
  return _has_bit(4);
}
inline void RobotPositionSensorMessage::clear_timestamp() {
  if (timestamp_ != &_default_timestamp_) {
    timestamp_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& RobotPositionSensorMessage::timestamp() const {
  return *timestamp_;
}
inline void RobotPositionSensorMessage::set_timestamp(const ::std::string& value) {
  _set_bit(4);
  if (timestamp_ == &_default_timestamp_) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void RobotPositionSensorMessage::set_timestamp(const char* value) {
  _set_bit(4);
  if (timestamp_ == &_default_timestamp_) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void RobotPositionSensorMessage::set_timestamp(const char* value, size_t size) {
  _set_bit(4);
  if (timestamp_ == &_default_timestamp_) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RobotPositionSensorMessage::mutable_timestamp() {
  _set_bit(4);
  if (timestamp_ == &_default_timestamp_) {
    timestamp_ = new ::std::string;
  }
  return timestamp_;
}

// repeated .SensorPair SensorData = 6;
inline int RobotPositionSensorMessage::sensordata_size() const {
  return sensordata_.size();
}
inline void RobotPositionSensorMessage::clear_sensordata() {
  sensordata_.Clear();
}
inline const ::SensorPair& RobotPositionSensorMessage::sensordata(int index) const {
  return sensordata_.Get(index);
}
inline ::SensorPair* RobotPositionSensorMessage::mutable_sensordata(int index) {
  return sensordata_.Mutable(index);
}
inline ::SensorPair* RobotPositionSensorMessage::add_sensordata() {
  return sensordata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SensorPair >&
RobotPositionSensorMessage::sensordata() const {
  return sensordata_;
}
inline ::google::protobuf::RepeatedPtrField< ::SensorPair >*
RobotPositionSensorMessage::mutable_sensordata() {
  return &sensordata_;
}

// -------------------------------------------------------------------

// SensorPair

// required string SensorName = 1 [default = ""];
inline bool SensorPair::has_sensorname() const {
  return _has_bit(0);
}
inline void SensorPair::clear_sensorname() {
  if (sensorname_ != &_default_sensorname_) {
    sensorname_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& SensorPair::sensorname() const {
  return *sensorname_;
}
inline void SensorPair::set_sensorname(const ::std::string& value) {
  _set_bit(0);
  if (sensorname_ == &_default_sensorname_) {
    sensorname_ = new ::std::string;
  }
  sensorname_->assign(value);
}
inline void SensorPair::set_sensorname(const char* value) {
  _set_bit(0);
  if (sensorname_ == &_default_sensorname_) {
    sensorname_ = new ::std::string;
  }
  sensorname_->assign(value);
}
inline void SensorPair::set_sensorname(const char* value, size_t size) {
  _set_bit(0);
  if (sensorname_ == &_default_sensorname_) {
    sensorname_ = new ::std::string;
  }
  sensorname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SensorPair::mutable_sensorname() {
  _set_bit(0);
  if (sensorname_ == &_default_sensorname_) {
    sensorname_ = new ::std::string;
  }
  return sensorname_;
}

// required float SensorValue = 2;
inline bool SensorPair::has_sensorvalue() const {
  return _has_bit(1);
}
inline void SensorPair::clear_sensorvalue() {
  sensorvalue_ = 0;
  _clear_bit(1);
}
inline float SensorPair::sensorvalue() const {
  return sensorvalue_;
}
inline void SensorPair::set_sensorvalue(float value) {
  _set_bit(1);
  sensorvalue_ = value;
}

// optional float SensorValueDiff = 3;
inline bool SensorPair::has_sensorvaluediff() const {
  return _has_bit(2);
}
inline void SensorPair::clear_sensorvaluediff() {
  sensorvaluediff_ = 0;
  _clear_bit(2);
}
inline float SensorPair::sensorvaluediff() const {
  return sensorvaluediff_;
}
inline void SensorPair::set_sensorvaluediff(float value) {
  _set_bit(2);
  sensorvaluediff_ = value;
}

// optional uint32 SensorTimeDiff = 4;
inline bool SensorPair::has_sensortimediff() const {
  return _has_bit(3);
}
inline void SensorPair::clear_sensortimediff() {
  sensortimediff_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 SensorPair::sensortimediff() const {
  return sensortimediff_;
}
inline void SensorPair::set_sensortimediff(::google::protobuf::uint32 value) {
  _set_bit(3);
  sensortimediff_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SensorsMessage_2eproto__INCLUDED
