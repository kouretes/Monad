// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SensorsMessage.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* InertialSensorsMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InertialSensorsMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* FSRSensorsMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FSRSensorsMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* UltaSoundSensorsMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UltaSoundSensorsMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeadJointSensorsMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeadJointSensorsMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* BodyJointSensorsMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BodyJointSensorsMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RobotPositionSensorMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RobotPositionSensorMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* SensorPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SensorPair_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SensorsMessage_2eproto() {
  protobuf_AddDesc_SensorsMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SensorsMessage.proto");
  GOOGLE_CHECK(file != NULL);
  InertialSensorsMessage_descriptor_ = file->message_type(0);
  static const int InertialSensorsMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InertialSensorsMessage, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InertialSensorsMessage, publisher_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InertialSensorsMessage, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InertialSensorsMessage, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InertialSensorsMessage, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InertialSensorsMessage, sensordata_),
  };
  InertialSensorsMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InertialSensorsMessage_descriptor_,
      InertialSensorsMessage::default_instance_,
      InertialSensorsMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InertialSensorsMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InertialSensorsMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InertialSensorsMessage));
  FSRSensorsMessage_descriptor_ = file->message_type(1);
  static const int FSRSensorsMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FSRSensorsMessage, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FSRSensorsMessage, publisher_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FSRSensorsMessage, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FSRSensorsMessage, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FSRSensorsMessage, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FSRSensorsMessage, sensordata_),
  };
  FSRSensorsMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FSRSensorsMessage_descriptor_,
      FSRSensorsMessage::default_instance_,
      FSRSensorsMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FSRSensorsMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FSRSensorsMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FSRSensorsMessage));
  UltaSoundSensorsMessage_descriptor_ = file->message_type(2);
  static const int UltaSoundSensorsMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UltaSoundSensorsMessage, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UltaSoundSensorsMessage, publisher_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UltaSoundSensorsMessage, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UltaSoundSensorsMessage, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UltaSoundSensorsMessage, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UltaSoundSensorsMessage, sensordata_),
  };
  UltaSoundSensorsMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UltaSoundSensorsMessage_descriptor_,
      UltaSoundSensorsMessage::default_instance_,
      UltaSoundSensorsMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UltaSoundSensorsMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UltaSoundSensorsMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UltaSoundSensorsMessage));
  HeadJointSensorsMessage_descriptor_ = file->message_type(3);
  static const int HeadJointSensorsMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadJointSensorsMessage, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadJointSensorsMessage, publisher_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadJointSensorsMessage, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadJointSensorsMessage, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadJointSensorsMessage, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadJointSensorsMessage, sensordata_),
  };
  HeadJointSensorsMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeadJointSensorsMessage_descriptor_,
      HeadJointSensorsMessage::default_instance_,
      HeadJointSensorsMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadJointSensorsMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadJointSensorsMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeadJointSensorsMessage));
  BodyJointSensorsMessage_descriptor_ = file->message_type(4);
  static const int BodyJointSensorsMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyJointSensorsMessage, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyJointSensorsMessage, publisher_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyJointSensorsMessage, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyJointSensorsMessage, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyJointSensorsMessage, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyJointSensorsMessage, sensordata_),
  };
  BodyJointSensorsMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BodyJointSensorsMessage_descriptor_,
      BodyJointSensorsMessage::default_instance_,
      BodyJointSensorsMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyJointSensorsMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyJointSensorsMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BodyJointSensorsMessage));
  RobotPositionSensorMessage_descriptor_ = file->message_type(5);
  static const int RobotPositionSensorMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotPositionSensorMessage, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotPositionSensorMessage, publisher_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotPositionSensorMessage, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotPositionSensorMessage, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotPositionSensorMessage, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotPositionSensorMessage, sensordata_),
  };
  RobotPositionSensorMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RobotPositionSensorMessage_descriptor_,
      RobotPositionSensorMessage::default_instance_,
      RobotPositionSensorMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotPositionSensorMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotPositionSensorMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RobotPositionSensorMessage));
  SensorPair_descriptor_ = file->message_type(6);
  static const int SensorPair_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorPair, sensorname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorPair, sensorvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorPair, sensorvaluediff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorPair, sensortimediff_),
  };
  SensorPair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SensorPair_descriptor_,
      SensorPair::default_instance_,
      SensorPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorPair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorPair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SensorPair));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SensorsMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InertialSensorsMessage_descriptor_, &InertialSensorsMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FSRSensorsMessage_descriptor_, &FSRSensorsMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UltaSoundSensorsMessage_descriptor_, &UltaSoundSensorsMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeadJointSensorsMessage_descriptor_, &HeadJointSensorsMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BodyJointSensorsMessage_descriptor_, &BodyJointSensorsMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RobotPositionSensorMessage_descriptor_, &RobotPositionSensorMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SensorPair_descriptor_, &SensorPair::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SensorsMessage_2eproto() {
  delete InertialSensorsMessage::default_instance_;
  delete InertialSensorsMessage_reflection_;
  delete FSRSensorsMessage::default_instance_;
  delete FSRSensorsMessage_reflection_;
  delete UltaSoundSensorsMessage::default_instance_;
  delete UltaSoundSensorsMessage_reflection_;
  delete HeadJointSensorsMessage::default_instance_;
  delete HeadJointSensorsMessage_reflection_;
  delete BodyJointSensorsMessage::default_instance_;
  delete BodyJointSensorsMessage_reflection_;
  delete RobotPositionSensorMessage::default_instance_;
  delete RobotPositionSensorMessage_reflection_;
  delete SensorPair::default_instance_;
  delete SensorPair_reflection_;
}

void protobuf_AddDesc_SensorsMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024SensorsMessage.proto\"\247\001\n\026InertialSenso"
    "rsMessage\022\027\n\004host\030\001 \002(\t:\tlocalhost\022\023\n\tpu"
    "blisher\030\002 \002(\t:\000\022\025\n\005topic\030\003 \002(\t:\006global\022\022"
    "\n\007timeout\030\004 \002(\005:\0010\022\023\n\ttimestamp\030\005 \002(\t:\000\022"
    "\037\n\nSensorData\030\006 \003(\0132\013.SensorPair\"\242\001\n\021FSR"
    "SensorsMessage\022\027\n\004host\030\001 \002(\t:\tlocalhost\022"
    "\023\n\tpublisher\030\002 \002(\t:\000\022\025\n\005topic\030\003 \002(\t:\006glo"
    "bal\022\022\n\007timeout\030\004 \002(\005:\0010\022\023\n\ttimestamp\030\005 \002"
    "(\t:\000\022\037\n\nSensorData\030\006 \003(\0132\013.SensorPair\"\250\001"
    "\n\027UltaSoundSensorsMessage\022\027\n\004host\030\001 \002(\t:"
    "\tlocalhost\022\023\n\tpublisher\030\002 \002(\t:\000\022\025\n\005topic"
    "\030\003 \002(\t:\006global\022\022\n\007timeout\030\004 \002(\005:\0010\022\023\n\tti"
    "mestamp\030\005 \002(\t:\000\022\037\n\nSensorData\030\006 \003(\0132\013.Se"
    "nsorPair\"\250\001\n\027HeadJointSensorsMessage\022\027\n\004"
    "host\030\001 \002(\t:\tlocalhost\022\023\n\tpublisher\030\002 \002(\t"
    ":\000\022\025\n\005topic\030\003 \002(\t:\006global\022\022\n\007timeout\030\004 \002"
    "(\005:\0010\022\023\n\ttimestamp\030\005 \002(\t:\000\022\037\n\nSensorData"
    "\030\006 \003(\0132\013.SensorPair\"\250\001\n\027BodyJointSensors"
    "Message\022\027\n\004host\030\001 \002(\t:\tlocalhost\022\023\n\tpubl"
    "isher\030\002 \002(\t:\000\022\025\n\005topic\030\003 \002(\t:\006global\022\022\n\007"
    "timeout\030\004 \002(\005:\0010\022\023\n\ttimestamp\030\005 \002(\t:\000\022\037\n"
    "\nSensorData\030\006 \003(\0132\013.SensorPair\"\253\001\n\032Robot"
    "PositionSensorMessage\022\027\n\004host\030\001 \002(\t:\tloc"
    "alhost\022\023\n\tpublisher\030\002 \002(\t:\000\022\025\n\005topic\030\003 \002"
    "(\t:\006global\022\022\n\007timeout\030\004 \002(\005:\0010\022\023\n\ttimest"
    "amp\030\005 \002(\t:\000\022\037\n\nSensorData\030\006 \003(\0132\013.Sensor"
    "Pair\"h\n\nSensorPair\022\024\n\nSensorName\030\001 \002(\t:\000"
    "\022\023\n\013SensorValue\030\002 \002(\002\022\027\n\017SensorValueDiff"
    "\030\003 \001(\002\022\026\n\016SensorTimeDiff\030\004 \001(\r", 1150);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SensorsMessage.proto", &protobuf_RegisterTypes);
  InertialSensorsMessage::default_instance_ = new InertialSensorsMessage();
  FSRSensorsMessage::default_instance_ = new FSRSensorsMessage();
  UltaSoundSensorsMessage::default_instance_ = new UltaSoundSensorsMessage();
  HeadJointSensorsMessage::default_instance_ = new HeadJointSensorsMessage();
  BodyJointSensorsMessage::default_instance_ = new BodyJointSensorsMessage();
  RobotPositionSensorMessage::default_instance_ = new RobotPositionSensorMessage();
  SensorPair::default_instance_ = new SensorPair();
  InertialSensorsMessage::default_instance_->InitAsDefaultInstance();
  FSRSensorsMessage::default_instance_->InitAsDefaultInstance();
  UltaSoundSensorsMessage::default_instance_->InitAsDefaultInstance();
  HeadJointSensorsMessage::default_instance_->InitAsDefaultInstance();
  BodyJointSensorsMessage::default_instance_->InitAsDefaultInstance();
  RobotPositionSensorMessage::default_instance_->InitAsDefaultInstance();
  SensorPair::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SensorsMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SensorsMessage_2eproto {
  StaticDescriptorInitializer_SensorsMessage_2eproto() {
    protobuf_AddDesc_SensorsMessage_2eproto();
  }
} static_descriptor_initializer_SensorsMessage_2eproto_;


// ===================================================================

const ::std::string InertialSensorsMessage::_default_host_("localhost");
const ::std::string InertialSensorsMessage::_default_publisher_;
const ::std::string InertialSensorsMessage::_default_topic_("global");
const ::std::string InertialSensorsMessage::_default_timestamp_;
#ifndef _MSC_VER
const int InertialSensorsMessage::kHostFieldNumber;
const int InertialSensorsMessage::kPublisherFieldNumber;
const int InertialSensorsMessage::kTopicFieldNumber;
const int InertialSensorsMessage::kTimeoutFieldNumber;
const int InertialSensorsMessage::kTimestampFieldNumber;
const int InertialSensorsMessage::kSensorDataFieldNumber;
#endif  // !_MSC_VER

InertialSensorsMessage::InertialSensorsMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InertialSensorsMessage::InitAsDefaultInstance() {
}

InertialSensorsMessage::InertialSensorsMessage(const InertialSensorsMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InertialSensorsMessage::SharedCtor() {
  _cached_size_ = 0;
  host_ = const_cast< ::std::string*>(&_default_host_);
  publisher_ = const_cast< ::std::string*>(&_default_publisher_);
  topic_ = const_cast< ::std::string*>(&_default_topic_);
  timeout_ = 0;
  timestamp_ = const_cast< ::std::string*>(&_default_timestamp_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InertialSensorsMessage::~InertialSensorsMessage() {
  SharedDtor();
}

void InertialSensorsMessage::SharedDtor() {
  if (host_ != &_default_host_) {
    delete host_;
  }
  if (publisher_ != &_default_publisher_) {
    delete publisher_;
  }
  if (topic_ != &_default_topic_) {
    delete topic_;
  }
  if (timestamp_ != &_default_timestamp_) {
    delete timestamp_;
  }
  if (this != default_instance_) {
  }
}

void InertialSensorsMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InertialSensorsMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InertialSensorsMessage_descriptor_;
}

const InertialSensorsMessage& InertialSensorsMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SensorsMessage_2eproto();  return *default_instance_;
}

InertialSensorsMessage* InertialSensorsMessage::default_instance_ = NULL;

InertialSensorsMessage* InertialSensorsMessage::New() const {
  return new InertialSensorsMessage;
}

void InertialSensorsMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (host_ != &_default_host_) {
        host_->assign(_default_host_);
      }
    }
    if (_has_bit(1)) {
      if (publisher_ != &_default_publisher_) {
        publisher_->clear();
      }
    }
    if (_has_bit(2)) {
      if (topic_ != &_default_topic_) {
        topic_->assign(_default_topic_);
      }
    }
    timeout_ = 0;
    if (_has_bit(4)) {
      if (timestamp_ != &_default_timestamp_) {
        timestamp_->clear();
      }
    }
  }
  sensordata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InertialSensorsMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string host = 1 [default = "localhost"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_publisher;
        break;
      }
      
      // required string publisher = 2 [default = ""];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_publisher:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_publisher()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->publisher().data(), this->publisher().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_topic;
        break;
      }
      
      // required string topic = 3 [default = "global"];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->topic().data(), this->topic().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_timeout;
        break;
      }
      
      // required int32 timeout = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeout_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_timestamp;
        break;
      }
      
      // required string timestamp = 5 [default = ""];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_SensorData;
        break;
      }
      
      // repeated .SensorPair SensorData = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SensorData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sensordata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_SensorData;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InertialSensorsMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string host = 1 [default = "localhost"];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->host(), output);
  }
  
  // required string publisher = 2 [default = ""];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->publisher().data(), this->publisher().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->publisher(), output);
  }
  
  // required string topic = 3 [default = "global"];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->topic(), output);
  }
  
  // required int32 timeout = 4 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->timeout(), output);
  }
  
  // required string timestamp = 5 [default = ""];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->timestamp(), output);
  }
  
  // repeated .SensorPair SensorData = 6;
  for (int i = 0; i < this->sensordata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->sensordata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InertialSensorsMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string host = 1 [default = "localhost"];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }
  
  // required string publisher = 2 [default = ""];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->publisher().data(), this->publisher().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->publisher(), target);
  }
  
  // required string topic = 3 [default = "global"];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->topic(), target);
  }
  
  // required int32 timeout = 4 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->timeout(), target);
  }
  
  // required string timestamp = 5 [default = ""];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->timestamp(), target);
  }
  
  // repeated .SensorPair SensorData = 6;
  for (int i = 0; i < this->sensordata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->sensordata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InertialSensorsMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string host = 1 [default = "localhost"];
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }
    
    // required string publisher = 2 [default = ""];
    if (has_publisher()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->publisher());
    }
    
    // required string topic = 3 [default = "global"];
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->topic());
    }
    
    // required int32 timeout = 4 [default = 0];
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeout());
    }
    
    // required string timestamp = 5 [default = ""];
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }
    
  }
  // repeated .SensorPair SensorData = 6;
  total_size += 1 * this->sensordata_size();
  for (int i = 0; i < this->sensordata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sensordata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InertialSensorsMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InertialSensorsMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InertialSensorsMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InertialSensorsMessage::MergeFrom(const InertialSensorsMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  sensordata_.MergeFrom(from.sensordata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_host(from.host());
    }
    if (from._has_bit(1)) {
      set_publisher(from.publisher());
    }
    if (from._has_bit(2)) {
      set_topic(from.topic());
    }
    if (from._has_bit(3)) {
      set_timeout(from.timeout());
    }
    if (from._has_bit(4)) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InertialSensorsMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InertialSensorsMessage::CopyFrom(const InertialSensorsMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InertialSensorsMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  for (int i = 0; i < sensordata_size(); i++) {
    if (!this->sensordata(i).IsInitialized()) return false;
  }
  return true;
}

void InertialSensorsMessage::Swap(InertialSensorsMessage* other) {
  if (other != this) {
    std::swap(host_, other->host_);
    std::swap(publisher_, other->publisher_);
    std::swap(topic_, other->topic_);
    std::swap(timeout_, other->timeout_);
    std::swap(timestamp_, other->timestamp_);
    sensordata_.Swap(&other->sensordata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InertialSensorsMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InertialSensorsMessage_descriptor_;
  metadata.reflection = InertialSensorsMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string FSRSensorsMessage::_default_host_("localhost");
const ::std::string FSRSensorsMessage::_default_publisher_;
const ::std::string FSRSensorsMessage::_default_topic_("global");
const ::std::string FSRSensorsMessage::_default_timestamp_;
#ifndef _MSC_VER
const int FSRSensorsMessage::kHostFieldNumber;
const int FSRSensorsMessage::kPublisherFieldNumber;
const int FSRSensorsMessage::kTopicFieldNumber;
const int FSRSensorsMessage::kTimeoutFieldNumber;
const int FSRSensorsMessage::kTimestampFieldNumber;
const int FSRSensorsMessage::kSensorDataFieldNumber;
#endif  // !_MSC_VER

FSRSensorsMessage::FSRSensorsMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FSRSensorsMessage::InitAsDefaultInstance() {
}

FSRSensorsMessage::FSRSensorsMessage(const FSRSensorsMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FSRSensorsMessage::SharedCtor() {
  _cached_size_ = 0;
  host_ = const_cast< ::std::string*>(&_default_host_);
  publisher_ = const_cast< ::std::string*>(&_default_publisher_);
  topic_ = const_cast< ::std::string*>(&_default_topic_);
  timeout_ = 0;
  timestamp_ = const_cast< ::std::string*>(&_default_timestamp_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FSRSensorsMessage::~FSRSensorsMessage() {
  SharedDtor();
}

void FSRSensorsMessage::SharedDtor() {
  if (host_ != &_default_host_) {
    delete host_;
  }
  if (publisher_ != &_default_publisher_) {
    delete publisher_;
  }
  if (topic_ != &_default_topic_) {
    delete topic_;
  }
  if (timestamp_ != &_default_timestamp_) {
    delete timestamp_;
  }
  if (this != default_instance_) {
  }
}

void FSRSensorsMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FSRSensorsMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FSRSensorsMessage_descriptor_;
}

const FSRSensorsMessage& FSRSensorsMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SensorsMessage_2eproto();  return *default_instance_;
}

FSRSensorsMessage* FSRSensorsMessage::default_instance_ = NULL;

FSRSensorsMessage* FSRSensorsMessage::New() const {
  return new FSRSensorsMessage;
}

void FSRSensorsMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (host_ != &_default_host_) {
        host_->assign(_default_host_);
      }
    }
    if (_has_bit(1)) {
      if (publisher_ != &_default_publisher_) {
        publisher_->clear();
      }
    }
    if (_has_bit(2)) {
      if (topic_ != &_default_topic_) {
        topic_->assign(_default_topic_);
      }
    }
    timeout_ = 0;
    if (_has_bit(4)) {
      if (timestamp_ != &_default_timestamp_) {
        timestamp_->clear();
      }
    }
  }
  sensordata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FSRSensorsMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string host = 1 [default = "localhost"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_publisher;
        break;
      }
      
      // required string publisher = 2 [default = ""];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_publisher:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_publisher()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->publisher().data(), this->publisher().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_topic;
        break;
      }
      
      // required string topic = 3 [default = "global"];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->topic().data(), this->topic().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_timeout;
        break;
      }
      
      // required int32 timeout = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeout_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_timestamp;
        break;
      }
      
      // required string timestamp = 5 [default = ""];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_SensorData;
        break;
      }
      
      // repeated .SensorPair SensorData = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SensorData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sensordata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_SensorData;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FSRSensorsMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string host = 1 [default = "localhost"];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->host(), output);
  }
  
  // required string publisher = 2 [default = ""];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->publisher().data(), this->publisher().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->publisher(), output);
  }
  
  // required string topic = 3 [default = "global"];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->topic(), output);
  }
  
  // required int32 timeout = 4 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->timeout(), output);
  }
  
  // required string timestamp = 5 [default = ""];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->timestamp(), output);
  }
  
  // repeated .SensorPair SensorData = 6;
  for (int i = 0; i < this->sensordata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->sensordata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FSRSensorsMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string host = 1 [default = "localhost"];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }
  
  // required string publisher = 2 [default = ""];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->publisher().data(), this->publisher().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->publisher(), target);
  }
  
  // required string topic = 3 [default = "global"];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->topic(), target);
  }
  
  // required int32 timeout = 4 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->timeout(), target);
  }
  
  // required string timestamp = 5 [default = ""];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->timestamp(), target);
  }
  
  // repeated .SensorPair SensorData = 6;
  for (int i = 0; i < this->sensordata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->sensordata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FSRSensorsMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string host = 1 [default = "localhost"];
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }
    
    // required string publisher = 2 [default = ""];
    if (has_publisher()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->publisher());
    }
    
    // required string topic = 3 [default = "global"];
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->topic());
    }
    
    // required int32 timeout = 4 [default = 0];
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeout());
    }
    
    // required string timestamp = 5 [default = ""];
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }
    
  }
  // repeated .SensorPair SensorData = 6;
  total_size += 1 * this->sensordata_size();
  for (int i = 0; i < this->sensordata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sensordata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FSRSensorsMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FSRSensorsMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FSRSensorsMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FSRSensorsMessage::MergeFrom(const FSRSensorsMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  sensordata_.MergeFrom(from.sensordata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_host(from.host());
    }
    if (from._has_bit(1)) {
      set_publisher(from.publisher());
    }
    if (from._has_bit(2)) {
      set_topic(from.topic());
    }
    if (from._has_bit(3)) {
      set_timeout(from.timeout());
    }
    if (from._has_bit(4)) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FSRSensorsMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FSRSensorsMessage::CopyFrom(const FSRSensorsMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FSRSensorsMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  for (int i = 0; i < sensordata_size(); i++) {
    if (!this->sensordata(i).IsInitialized()) return false;
  }
  return true;
}

void FSRSensorsMessage::Swap(FSRSensorsMessage* other) {
  if (other != this) {
    std::swap(host_, other->host_);
    std::swap(publisher_, other->publisher_);
    std::swap(topic_, other->topic_);
    std::swap(timeout_, other->timeout_);
    std::swap(timestamp_, other->timestamp_);
    sensordata_.Swap(&other->sensordata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FSRSensorsMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FSRSensorsMessage_descriptor_;
  metadata.reflection = FSRSensorsMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string UltaSoundSensorsMessage::_default_host_("localhost");
const ::std::string UltaSoundSensorsMessage::_default_publisher_;
const ::std::string UltaSoundSensorsMessage::_default_topic_("global");
const ::std::string UltaSoundSensorsMessage::_default_timestamp_;
#ifndef _MSC_VER
const int UltaSoundSensorsMessage::kHostFieldNumber;
const int UltaSoundSensorsMessage::kPublisherFieldNumber;
const int UltaSoundSensorsMessage::kTopicFieldNumber;
const int UltaSoundSensorsMessage::kTimeoutFieldNumber;
const int UltaSoundSensorsMessage::kTimestampFieldNumber;
const int UltaSoundSensorsMessage::kSensorDataFieldNumber;
#endif  // !_MSC_VER

UltaSoundSensorsMessage::UltaSoundSensorsMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UltaSoundSensorsMessage::InitAsDefaultInstance() {
}

UltaSoundSensorsMessage::UltaSoundSensorsMessage(const UltaSoundSensorsMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UltaSoundSensorsMessage::SharedCtor() {
  _cached_size_ = 0;
  host_ = const_cast< ::std::string*>(&_default_host_);
  publisher_ = const_cast< ::std::string*>(&_default_publisher_);
  topic_ = const_cast< ::std::string*>(&_default_topic_);
  timeout_ = 0;
  timestamp_ = const_cast< ::std::string*>(&_default_timestamp_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UltaSoundSensorsMessage::~UltaSoundSensorsMessage() {
  SharedDtor();
}

void UltaSoundSensorsMessage::SharedDtor() {
  if (host_ != &_default_host_) {
    delete host_;
  }
  if (publisher_ != &_default_publisher_) {
    delete publisher_;
  }
  if (topic_ != &_default_topic_) {
    delete topic_;
  }
  if (timestamp_ != &_default_timestamp_) {
    delete timestamp_;
  }
  if (this != default_instance_) {
  }
}

void UltaSoundSensorsMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UltaSoundSensorsMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UltaSoundSensorsMessage_descriptor_;
}

const UltaSoundSensorsMessage& UltaSoundSensorsMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SensorsMessage_2eproto();  return *default_instance_;
}

UltaSoundSensorsMessage* UltaSoundSensorsMessage::default_instance_ = NULL;

UltaSoundSensorsMessage* UltaSoundSensorsMessage::New() const {
  return new UltaSoundSensorsMessage;
}

void UltaSoundSensorsMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (host_ != &_default_host_) {
        host_->assign(_default_host_);
      }
    }
    if (_has_bit(1)) {
      if (publisher_ != &_default_publisher_) {
        publisher_->clear();
      }
    }
    if (_has_bit(2)) {
      if (topic_ != &_default_topic_) {
        topic_->assign(_default_topic_);
      }
    }
    timeout_ = 0;
    if (_has_bit(4)) {
      if (timestamp_ != &_default_timestamp_) {
        timestamp_->clear();
      }
    }
  }
  sensordata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UltaSoundSensorsMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string host = 1 [default = "localhost"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_publisher;
        break;
      }
      
      // required string publisher = 2 [default = ""];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_publisher:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_publisher()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->publisher().data(), this->publisher().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_topic;
        break;
      }
      
      // required string topic = 3 [default = "global"];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->topic().data(), this->topic().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_timeout;
        break;
      }
      
      // required int32 timeout = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeout_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_timestamp;
        break;
      }
      
      // required string timestamp = 5 [default = ""];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_SensorData;
        break;
      }
      
      // repeated .SensorPair SensorData = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SensorData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sensordata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_SensorData;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UltaSoundSensorsMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string host = 1 [default = "localhost"];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->host(), output);
  }
  
  // required string publisher = 2 [default = ""];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->publisher().data(), this->publisher().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->publisher(), output);
  }
  
  // required string topic = 3 [default = "global"];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->topic(), output);
  }
  
  // required int32 timeout = 4 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->timeout(), output);
  }
  
  // required string timestamp = 5 [default = ""];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->timestamp(), output);
  }
  
  // repeated .SensorPair SensorData = 6;
  for (int i = 0; i < this->sensordata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->sensordata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UltaSoundSensorsMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string host = 1 [default = "localhost"];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }
  
  // required string publisher = 2 [default = ""];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->publisher().data(), this->publisher().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->publisher(), target);
  }
  
  // required string topic = 3 [default = "global"];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->topic(), target);
  }
  
  // required int32 timeout = 4 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->timeout(), target);
  }
  
  // required string timestamp = 5 [default = ""];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->timestamp(), target);
  }
  
  // repeated .SensorPair SensorData = 6;
  for (int i = 0; i < this->sensordata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->sensordata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UltaSoundSensorsMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string host = 1 [default = "localhost"];
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }
    
    // required string publisher = 2 [default = ""];
    if (has_publisher()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->publisher());
    }
    
    // required string topic = 3 [default = "global"];
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->topic());
    }
    
    // required int32 timeout = 4 [default = 0];
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeout());
    }
    
    // required string timestamp = 5 [default = ""];
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }
    
  }
  // repeated .SensorPair SensorData = 6;
  total_size += 1 * this->sensordata_size();
  for (int i = 0; i < this->sensordata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sensordata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UltaSoundSensorsMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UltaSoundSensorsMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UltaSoundSensorsMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UltaSoundSensorsMessage::MergeFrom(const UltaSoundSensorsMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  sensordata_.MergeFrom(from.sensordata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_host(from.host());
    }
    if (from._has_bit(1)) {
      set_publisher(from.publisher());
    }
    if (from._has_bit(2)) {
      set_topic(from.topic());
    }
    if (from._has_bit(3)) {
      set_timeout(from.timeout());
    }
    if (from._has_bit(4)) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UltaSoundSensorsMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UltaSoundSensorsMessage::CopyFrom(const UltaSoundSensorsMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UltaSoundSensorsMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  for (int i = 0; i < sensordata_size(); i++) {
    if (!this->sensordata(i).IsInitialized()) return false;
  }
  return true;
}

void UltaSoundSensorsMessage::Swap(UltaSoundSensorsMessage* other) {
  if (other != this) {
    std::swap(host_, other->host_);
    std::swap(publisher_, other->publisher_);
    std::swap(topic_, other->topic_);
    std::swap(timeout_, other->timeout_);
    std::swap(timestamp_, other->timestamp_);
    sensordata_.Swap(&other->sensordata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UltaSoundSensorsMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UltaSoundSensorsMessage_descriptor_;
  metadata.reflection = UltaSoundSensorsMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string HeadJointSensorsMessage::_default_host_("localhost");
const ::std::string HeadJointSensorsMessage::_default_publisher_;
const ::std::string HeadJointSensorsMessage::_default_topic_("global");
const ::std::string HeadJointSensorsMessage::_default_timestamp_;
#ifndef _MSC_VER
const int HeadJointSensorsMessage::kHostFieldNumber;
const int HeadJointSensorsMessage::kPublisherFieldNumber;
const int HeadJointSensorsMessage::kTopicFieldNumber;
const int HeadJointSensorsMessage::kTimeoutFieldNumber;
const int HeadJointSensorsMessage::kTimestampFieldNumber;
const int HeadJointSensorsMessage::kSensorDataFieldNumber;
#endif  // !_MSC_VER

HeadJointSensorsMessage::HeadJointSensorsMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeadJointSensorsMessage::InitAsDefaultInstance() {
}

HeadJointSensorsMessage::HeadJointSensorsMessage(const HeadJointSensorsMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeadJointSensorsMessage::SharedCtor() {
  _cached_size_ = 0;
  host_ = const_cast< ::std::string*>(&_default_host_);
  publisher_ = const_cast< ::std::string*>(&_default_publisher_);
  topic_ = const_cast< ::std::string*>(&_default_topic_);
  timeout_ = 0;
  timestamp_ = const_cast< ::std::string*>(&_default_timestamp_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeadJointSensorsMessage::~HeadJointSensorsMessage() {
  SharedDtor();
}

void HeadJointSensorsMessage::SharedDtor() {
  if (host_ != &_default_host_) {
    delete host_;
  }
  if (publisher_ != &_default_publisher_) {
    delete publisher_;
  }
  if (topic_ != &_default_topic_) {
    delete topic_;
  }
  if (timestamp_ != &_default_timestamp_) {
    delete timestamp_;
  }
  if (this != default_instance_) {
  }
}

void HeadJointSensorsMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeadJointSensorsMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeadJointSensorsMessage_descriptor_;
}

const HeadJointSensorsMessage& HeadJointSensorsMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SensorsMessage_2eproto();  return *default_instance_;
}

HeadJointSensorsMessage* HeadJointSensorsMessage::default_instance_ = NULL;

HeadJointSensorsMessage* HeadJointSensorsMessage::New() const {
  return new HeadJointSensorsMessage;
}

void HeadJointSensorsMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (host_ != &_default_host_) {
        host_->assign(_default_host_);
      }
    }
    if (_has_bit(1)) {
      if (publisher_ != &_default_publisher_) {
        publisher_->clear();
      }
    }
    if (_has_bit(2)) {
      if (topic_ != &_default_topic_) {
        topic_->assign(_default_topic_);
      }
    }
    timeout_ = 0;
    if (_has_bit(4)) {
      if (timestamp_ != &_default_timestamp_) {
        timestamp_->clear();
      }
    }
  }
  sensordata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeadJointSensorsMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string host = 1 [default = "localhost"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_publisher;
        break;
      }
      
      // required string publisher = 2 [default = ""];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_publisher:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_publisher()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->publisher().data(), this->publisher().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_topic;
        break;
      }
      
      // required string topic = 3 [default = "global"];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->topic().data(), this->topic().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_timeout;
        break;
      }
      
      // required int32 timeout = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeout_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_timestamp;
        break;
      }
      
      // required string timestamp = 5 [default = ""];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_SensorData;
        break;
      }
      
      // repeated .SensorPair SensorData = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SensorData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sensordata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_SensorData;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeadJointSensorsMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string host = 1 [default = "localhost"];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->host(), output);
  }
  
  // required string publisher = 2 [default = ""];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->publisher().data(), this->publisher().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->publisher(), output);
  }
  
  // required string topic = 3 [default = "global"];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->topic(), output);
  }
  
  // required int32 timeout = 4 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->timeout(), output);
  }
  
  // required string timestamp = 5 [default = ""];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->timestamp(), output);
  }
  
  // repeated .SensorPair SensorData = 6;
  for (int i = 0; i < this->sensordata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->sensordata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeadJointSensorsMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string host = 1 [default = "localhost"];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }
  
  // required string publisher = 2 [default = ""];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->publisher().data(), this->publisher().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->publisher(), target);
  }
  
  // required string topic = 3 [default = "global"];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->topic(), target);
  }
  
  // required int32 timeout = 4 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->timeout(), target);
  }
  
  // required string timestamp = 5 [default = ""];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->timestamp(), target);
  }
  
  // repeated .SensorPair SensorData = 6;
  for (int i = 0; i < this->sensordata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->sensordata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeadJointSensorsMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string host = 1 [default = "localhost"];
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }
    
    // required string publisher = 2 [default = ""];
    if (has_publisher()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->publisher());
    }
    
    // required string topic = 3 [default = "global"];
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->topic());
    }
    
    // required int32 timeout = 4 [default = 0];
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeout());
    }
    
    // required string timestamp = 5 [default = ""];
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }
    
  }
  // repeated .SensorPair SensorData = 6;
  total_size += 1 * this->sensordata_size();
  for (int i = 0; i < this->sensordata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sensordata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeadJointSensorsMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeadJointSensorsMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeadJointSensorsMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeadJointSensorsMessage::MergeFrom(const HeadJointSensorsMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  sensordata_.MergeFrom(from.sensordata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_host(from.host());
    }
    if (from._has_bit(1)) {
      set_publisher(from.publisher());
    }
    if (from._has_bit(2)) {
      set_topic(from.topic());
    }
    if (from._has_bit(3)) {
      set_timeout(from.timeout());
    }
    if (from._has_bit(4)) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeadJointSensorsMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeadJointSensorsMessage::CopyFrom(const HeadJointSensorsMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeadJointSensorsMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  for (int i = 0; i < sensordata_size(); i++) {
    if (!this->sensordata(i).IsInitialized()) return false;
  }
  return true;
}

void HeadJointSensorsMessage::Swap(HeadJointSensorsMessage* other) {
  if (other != this) {
    std::swap(host_, other->host_);
    std::swap(publisher_, other->publisher_);
    std::swap(topic_, other->topic_);
    std::swap(timeout_, other->timeout_);
    std::swap(timestamp_, other->timestamp_);
    sensordata_.Swap(&other->sensordata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeadJointSensorsMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeadJointSensorsMessage_descriptor_;
  metadata.reflection = HeadJointSensorsMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string BodyJointSensorsMessage::_default_host_("localhost");
const ::std::string BodyJointSensorsMessage::_default_publisher_;
const ::std::string BodyJointSensorsMessage::_default_topic_("global");
const ::std::string BodyJointSensorsMessage::_default_timestamp_;
#ifndef _MSC_VER
const int BodyJointSensorsMessage::kHostFieldNumber;
const int BodyJointSensorsMessage::kPublisherFieldNumber;
const int BodyJointSensorsMessage::kTopicFieldNumber;
const int BodyJointSensorsMessage::kTimeoutFieldNumber;
const int BodyJointSensorsMessage::kTimestampFieldNumber;
const int BodyJointSensorsMessage::kSensorDataFieldNumber;
#endif  // !_MSC_VER

BodyJointSensorsMessage::BodyJointSensorsMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BodyJointSensorsMessage::InitAsDefaultInstance() {
}

BodyJointSensorsMessage::BodyJointSensorsMessage(const BodyJointSensorsMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BodyJointSensorsMessage::SharedCtor() {
  _cached_size_ = 0;
  host_ = const_cast< ::std::string*>(&_default_host_);
  publisher_ = const_cast< ::std::string*>(&_default_publisher_);
  topic_ = const_cast< ::std::string*>(&_default_topic_);
  timeout_ = 0;
  timestamp_ = const_cast< ::std::string*>(&_default_timestamp_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BodyJointSensorsMessage::~BodyJointSensorsMessage() {
  SharedDtor();
}

void BodyJointSensorsMessage::SharedDtor() {
  if (host_ != &_default_host_) {
    delete host_;
  }
  if (publisher_ != &_default_publisher_) {
    delete publisher_;
  }
  if (topic_ != &_default_topic_) {
    delete topic_;
  }
  if (timestamp_ != &_default_timestamp_) {
    delete timestamp_;
  }
  if (this != default_instance_) {
  }
}

void BodyJointSensorsMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BodyJointSensorsMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BodyJointSensorsMessage_descriptor_;
}

const BodyJointSensorsMessage& BodyJointSensorsMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SensorsMessage_2eproto();  return *default_instance_;
}

BodyJointSensorsMessage* BodyJointSensorsMessage::default_instance_ = NULL;

BodyJointSensorsMessage* BodyJointSensorsMessage::New() const {
  return new BodyJointSensorsMessage;
}

void BodyJointSensorsMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (host_ != &_default_host_) {
        host_->assign(_default_host_);
      }
    }
    if (_has_bit(1)) {
      if (publisher_ != &_default_publisher_) {
        publisher_->clear();
      }
    }
    if (_has_bit(2)) {
      if (topic_ != &_default_topic_) {
        topic_->assign(_default_topic_);
      }
    }
    timeout_ = 0;
    if (_has_bit(4)) {
      if (timestamp_ != &_default_timestamp_) {
        timestamp_->clear();
      }
    }
  }
  sensordata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BodyJointSensorsMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string host = 1 [default = "localhost"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_publisher;
        break;
      }
      
      // required string publisher = 2 [default = ""];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_publisher:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_publisher()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->publisher().data(), this->publisher().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_topic;
        break;
      }
      
      // required string topic = 3 [default = "global"];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->topic().data(), this->topic().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_timeout;
        break;
      }
      
      // required int32 timeout = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeout_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_timestamp;
        break;
      }
      
      // required string timestamp = 5 [default = ""];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_SensorData;
        break;
      }
      
      // repeated .SensorPair SensorData = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SensorData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sensordata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_SensorData;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BodyJointSensorsMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string host = 1 [default = "localhost"];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->host(), output);
  }
  
  // required string publisher = 2 [default = ""];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->publisher().data(), this->publisher().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->publisher(), output);
  }
  
  // required string topic = 3 [default = "global"];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->topic(), output);
  }
  
  // required int32 timeout = 4 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->timeout(), output);
  }
  
  // required string timestamp = 5 [default = ""];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->timestamp(), output);
  }
  
  // repeated .SensorPair SensorData = 6;
  for (int i = 0; i < this->sensordata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->sensordata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BodyJointSensorsMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string host = 1 [default = "localhost"];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }
  
  // required string publisher = 2 [default = ""];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->publisher().data(), this->publisher().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->publisher(), target);
  }
  
  // required string topic = 3 [default = "global"];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->topic(), target);
  }
  
  // required int32 timeout = 4 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->timeout(), target);
  }
  
  // required string timestamp = 5 [default = ""];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->timestamp(), target);
  }
  
  // repeated .SensorPair SensorData = 6;
  for (int i = 0; i < this->sensordata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->sensordata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BodyJointSensorsMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string host = 1 [default = "localhost"];
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }
    
    // required string publisher = 2 [default = ""];
    if (has_publisher()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->publisher());
    }
    
    // required string topic = 3 [default = "global"];
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->topic());
    }
    
    // required int32 timeout = 4 [default = 0];
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeout());
    }
    
    // required string timestamp = 5 [default = ""];
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }
    
  }
  // repeated .SensorPair SensorData = 6;
  total_size += 1 * this->sensordata_size();
  for (int i = 0; i < this->sensordata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sensordata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BodyJointSensorsMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BodyJointSensorsMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BodyJointSensorsMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BodyJointSensorsMessage::MergeFrom(const BodyJointSensorsMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  sensordata_.MergeFrom(from.sensordata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_host(from.host());
    }
    if (from._has_bit(1)) {
      set_publisher(from.publisher());
    }
    if (from._has_bit(2)) {
      set_topic(from.topic());
    }
    if (from._has_bit(3)) {
      set_timeout(from.timeout());
    }
    if (from._has_bit(4)) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BodyJointSensorsMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BodyJointSensorsMessage::CopyFrom(const BodyJointSensorsMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BodyJointSensorsMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  for (int i = 0; i < sensordata_size(); i++) {
    if (!this->sensordata(i).IsInitialized()) return false;
  }
  return true;
}

void BodyJointSensorsMessage::Swap(BodyJointSensorsMessage* other) {
  if (other != this) {
    std::swap(host_, other->host_);
    std::swap(publisher_, other->publisher_);
    std::swap(topic_, other->topic_);
    std::swap(timeout_, other->timeout_);
    std::swap(timestamp_, other->timestamp_);
    sensordata_.Swap(&other->sensordata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BodyJointSensorsMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BodyJointSensorsMessage_descriptor_;
  metadata.reflection = BodyJointSensorsMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string RobotPositionSensorMessage::_default_host_("localhost");
const ::std::string RobotPositionSensorMessage::_default_publisher_;
const ::std::string RobotPositionSensorMessage::_default_topic_("global");
const ::std::string RobotPositionSensorMessage::_default_timestamp_;
#ifndef _MSC_VER
const int RobotPositionSensorMessage::kHostFieldNumber;
const int RobotPositionSensorMessage::kPublisherFieldNumber;
const int RobotPositionSensorMessage::kTopicFieldNumber;
const int RobotPositionSensorMessage::kTimeoutFieldNumber;
const int RobotPositionSensorMessage::kTimestampFieldNumber;
const int RobotPositionSensorMessage::kSensorDataFieldNumber;
#endif  // !_MSC_VER

RobotPositionSensorMessage::RobotPositionSensorMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RobotPositionSensorMessage::InitAsDefaultInstance() {
}

RobotPositionSensorMessage::RobotPositionSensorMessage(const RobotPositionSensorMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RobotPositionSensorMessage::SharedCtor() {
  _cached_size_ = 0;
  host_ = const_cast< ::std::string*>(&_default_host_);
  publisher_ = const_cast< ::std::string*>(&_default_publisher_);
  topic_ = const_cast< ::std::string*>(&_default_topic_);
  timeout_ = 0;
  timestamp_ = const_cast< ::std::string*>(&_default_timestamp_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RobotPositionSensorMessage::~RobotPositionSensorMessage() {
  SharedDtor();
}

void RobotPositionSensorMessage::SharedDtor() {
  if (host_ != &_default_host_) {
    delete host_;
  }
  if (publisher_ != &_default_publisher_) {
    delete publisher_;
  }
  if (topic_ != &_default_topic_) {
    delete topic_;
  }
  if (timestamp_ != &_default_timestamp_) {
    delete timestamp_;
  }
  if (this != default_instance_) {
  }
}

void RobotPositionSensorMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RobotPositionSensorMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RobotPositionSensorMessage_descriptor_;
}

const RobotPositionSensorMessage& RobotPositionSensorMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SensorsMessage_2eproto();  return *default_instance_;
}

RobotPositionSensorMessage* RobotPositionSensorMessage::default_instance_ = NULL;

RobotPositionSensorMessage* RobotPositionSensorMessage::New() const {
  return new RobotPositionSensorMessage;
}

void RobotPositionSensorMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (host_ != &_default_host_) {
        host_->assign(_default_host_);
      }
    }
    if (_has_bit(1)) {
      if (publisher_ != &_default_publisher_) {
        publisher_->clear();
      }
    }
    if (_has_bit(2)) {
      if (topic_ != &_default_topic_) {
        topic_->assign(_default_topic_);
      }
    }
    timeout_ = 0;
    if (_has_bit(4)) {
      if (timestamp_ != &_default_timestamp_) {
        timestamp_->clear();
      }
    }
  }
  sensordata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RobotPositionSensorMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string host = 1 [default = "localhost"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_publisher;
        break;
      }
      
      // required string publisher = 2 [default = ""];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_publisher:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_publisher()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->publisher().data(), this->publisher().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_topic;
        break;
      }
      
      // required string topic = 3 [default = "global"];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->topic().data(), this->topic().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_timeout;
        break;
      }
      
      // required int32 timeout = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeout_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_timestamp;
        break;
      }
      
      // required string timestamp = 5 [default = ""];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_SensorData;
        break;
      }
      
      // repeated .SensorPair SensorData = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SensorData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sensordata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_SensorData;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RobotPositionSensorMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string host = 1 [default = "localhost"];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->host(), output);
  }
  
  // required string publisher = 2 [default = ""];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->publisher().data(), this->publisher().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->publisher(), output);
  }
  
  // required string topic = 3 [default = "global"];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->topic(), output);
  }
  
  // required int32 timeout = 4 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->timeout(), output);
  }
  
  // required string timestamp = 5 [default = ""];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->timestamp(), output);
  }
  
  // repeated .SensorPair SensorData = 6;
  for (int i = 0; i < this->sensordata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->sensordata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RobotPositionSensorMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string host = 1 [default = "localhost"];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }
  
  // required string publisher = 2 [default = ""];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->publisher().data(), this->publisher().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->publisher(), target);
  }
  
  // required string topic = 3 [default = "global"];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->topic(), target);
  }
  
  // required int32 timeout = 4 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->timeout(), target);
  }
  
  // required string timestamp = 5 [default = ""];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->timestamp(), target);
  }
  
  // repeated .SensorPair SensorData = 6;
  for (int i = 0; i < this->sensordata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->sensordata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RobotPositionSensorMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string host = 1 [default = "localhost"];
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }
    
    // required string publisher = 2 [default = ""];
    if (has_publisher()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->publisher());
    }
    
    // required string topic = 3 [default = "global"];
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->topic());
    }
    
    // required int32 timeout = 4 [default = 0];
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeout());
    }
    
    // required string timestamp = 5 [default = ""];
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }
    
  }
  // repeated .SensorPair SensorData = 6;
  total_size += 1 * this->sensordata_size();
  for (int i = 0; i < this->sensordata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sensordata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RobotPositionSensorMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RobotPositionSensorMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RobotPositionSensorMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RobotPositionSensorMessage::MergeFrom(const RobotPositionSensorMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  sensordata_.MergeFrom(from.sensordata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_host(from.host());
    }
    if (from._has_bit(1)) {
      set_publisher(from.publisher());
    }
    if (from._has_bit(2)) {
      set_topic(from.topic());
    }
    if (from._has_bit(3)) {
      set_timeout(from.timeout());
    }
    if (from._has_bit(4)) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RobotPositionSensorMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotPositionSensorMessage::CopyFrom(const RobotPositionSensorMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotPositionSensorMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  for (int i = 0; i < sensordata_size(); i++) {
    if (!this->sensordata(i).IsInitialized()) return false;
  }
  return true;
}

void RobotPositionSensorMessage::Swap(RobotPositionSensorMessage* other) {
  if (other != this) {
    std::swap(host_, other->host_);
    std::swap(publisher_, other->publisher_);
    std::swap(topic_, other->topic_);
    std::swap(timeout_, other->timeout_);
    std::swap(timestamp_, other->timestamp_);
    sensordata_.Swap(&other->sensordata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RobotPositionSensorMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RobotPositionSensorMessage_descriptor_;
  metadata.reflection = RobotPositionSensorMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string SensorPair::_default_sensorname_;
#ifndef _MSC_VER
const int SensorPair::kSensorNameFieldNumber;
const int SensorPair::kSensorValueFieldNumber;
const int SensorPair::kSensorValueDiffFieldNumber;
const int SensorPair::kSensorTimeDiffFieldNumber;
#endif  // !_MSC_VER

SensorPair::SensorPair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SensorPair::InitAsDefaultInstance() {
}

SensorPair::SensorPair(const SensorPair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SensorPair::SharedCtor() {
  _cached_size_ = 0;
  sensorname_ = const_cast< ::std::string*>(&_default_sensorname_);
  sensorvalue_ = 0;
  sensorvaluediff_ = 0;
  sensortimediff_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SensorPair::~SensorPair() {
  SharedDtor();
}

void SensorPair::SharedDtor() {
  if (sensorname_ != &_default_sensorname_) {
    delete sensorname_;
  }
  if (this != default_instance_) {
  }
}

void SensorPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SensorPair_descriptor_;
}

const SensorPair& SensorPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SensorsMessage_2eproto();  return *default_instance_;
}

SensorPair* SensorPair::default_instance_ = NULL;

SensorPair* SensorPair::New() const {
  return new SensorPair;
}

void SensorPair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (sensorname_ != &_default_sensorname_) {
        sensorname_->clear();
      }
    }
    sensorvalue_ = 0;
    sensorvaluediff_ = 0;
    sensortimediff_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SensorPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string SensorName = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensorname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sensorname().data(), this->sensorname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_SensorValue;
        break;
      }
      
      // required float SensorValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_SensorValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sensorvalue_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_SensorValueDiff;
        break;
      }
      
      // optional float SensorValueDiff = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_SensorValueDiff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sensorvaluediff_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_SensorTimeDiff;
        break;
      }
      
      // optional uint32 SensorTimeDiff = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SensorTimeDiff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensortimediff_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SensorPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string SensorName = 1 [default = ""];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sensorname(), output);
  }
  
  // required float SensorValue = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->sensorvalue(), output);
  }
  
  // optional float SensorValueDiff = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->sensorvaluediff(), output);
  }
  
  // optional uint32 SensorTimeDiff = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sensortimediff(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SensorPair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string SensorName = 1 [default = ""];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sensorname(), target);
  }
  
  // required float SensorValue = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->sensorvalue(), target);
  }
  
  // optional float SensorValueDiff = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->sensorvaluediff(), target);
  }
  
  // optional uint32 SensorTimeDiff = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sensortimediff(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SensorPair::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string SensorName = 1 [default = ""];
    if (has_sensorname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sensorname());
    }
    
    // required float SensorValue = 2;
    if (has_sensorvalue()) {
      total_size += 1 + 4;
    }
    
    // optional float SensorValueDiff = 3;
    if (has_sensorvaluediff()) {
      total_size += 1 + 4;
    }
    
    // optional uint32 SensorTimeDiff = 4;
    if (has_sensortimediff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sensortimediff());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorPair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SensorPair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SensorPair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SensorPair::MergeFrom(const SensorPair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_sensorname(from.sensorname());
    }
    if (from._has_bit(1)) {
      set_sensorvalue(from.sensorvalue());
    }
    if (from._has_bit(2)) {
      set_sensorvaluediff(from.sensorvaluediff());
    }
    if (from._has_bit(3)) {
      set_sensortimediff(from.sensortimediff());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SensorPair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorPair::CopyFrom(const SensorPair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorPair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SensorPair::Swap(SensorPair* other) {
  if (other != this) {
    std::swap(sensorname_, other->sensorname_);
    std::swap(sensorvalue_, other->sensorvalue_);
    std::swap(sensorvaluediff_, other->sensorvaluediff_);
    std::swap(sensortimediff_, other->sensortimediff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SensorPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SensorPair_descriptor_;
  metadata.reflection = SensorPair_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
